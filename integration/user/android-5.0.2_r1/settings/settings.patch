From 5cf4b38e4adf64e1ae8b0d48e1ce4317f57ede5b Mon Sep 17 00:00:00 2001
From: Nicolae-Alexandru Ivan <alexandru.ivan@intel.com>
Date: Wed, 29 Apr 2015 16:16:36 +0300
Subject: [PATCH] Integrate multi-user encryption into Settings app

There is currently a security issue when changing the password for a
storage. Since we need the old password, which is checked in a different
activity than the one where the new password is introduced, we have to
pass it between activities.
---
 res/values/strings.xml                            |  3 ++
 src/com/android/settings/ChooseLockPassword.java  | 16 ++++++
 src/com/android/settings/ConfirmLockPassword.java |  3 ++
 src/com/android/settings/users/UserSettings.java  | 59 ++++++++++++++++++++---
 4 files changed, 74 insertions(+), 7 deletions(-)

diff --git a/res/values/strings.xml b/res/values/strings.xml
index 0a139d5..c7237c1 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -5231,6 +5231,9 @@
     <!-- Message to limited users that they cannot add accounts [CHAR LIMIT=100] -->
     <string name="user_cannot_add_accounts_message">Restricted profiles cannot add accounts</string>
 
+    <string name="user_encrypted_title">Encryption</string>
+    <string name="user_encrypted_message">Encrypt new user?</string>
+
     <!-- User details remove user menu [CHAR LIMIT=20] -->
     <string name="user_remove_user_menu">Delete <xliff:g id="user_name">%1$s</xliff:g> from this device</string>
     <!-- User menu to allow creating new users from lockscreen [CHAR LIMIT=30] -->
diff --git a/src/com/android/settings/ChooseLockPassword.java b/src/com/android/settings/ChooseLockPassword.java
index b72d5c5..e07e367 100644
--- a/src/com/android/settings/ChooseLockPassword.java
+++ b/src/com/android/settings/ChooseLockPassword.java
@@ -30,7 +30,11 @@ import android.content.Intent;
 import android.inputmethodservice.KeyboardView;
 import android.os.Bundle;
 import android.os.Handler;
+import android.os.IBinder;
 import android.os.Message;
+import android.os.ServiceManager;
+import android.os.UserManager;
+import android.os.storage.IEFSService;
 import android.provider.Settings;
 import android.text.Editable;
 import android.text.InputType;
@@ -428,6 +432,18 @@ public class ChooseLockPassword extends SettingsActivity {
                     mLockPatternUtils.clearLock(isFallback);
                     final boolean required = getActivity().getIntent().getBooleanExtra(
                             EncryptionInterstitial.EXTRA_REQUIRE_PASSWORD, true);
+                    final String oldpin = System.getProperty("efs.unsafe.temp");
+                    System.clearProperty("efs.unsafe.temp");
+                    final IBinder binder = ServiceManager.getService("efsservice");
+                    final UserManager um = UserManager.get(getActivity());
+                    final int currentUser = mLockPatternUtils.getCurrentUser();
+                    if (binder != null) {
+                        final IEFSService service = IEFSService.Stub.asInterface(binder);
+                        try {
+                            if (service != null && um.getUserInfo(currentUser).isEncrypted())
+                                service.changeUserDataPassword(currentUser, oldpin, pin);
+                        } catch (Exception e) {}
+                    }
                     mLockPatternUtils.setCredentialRequiredToDecrypt(required);
                     mLockPatternUtils.saveLockPassword(pin, mRequestedQuality, isFallback);
                     getActivity().setResult(RESULT_FINISHED);
diff --git a/src/com/android/settings/ConfirmLockPassword.java b/src/com/android/settings/ConfirmLockPassword.java
index c74e861..0004945 100644
--- a/src/com/android/settings/ConfirmLockPassword.java
+++ b/src/com/android/settings/ConfirmLockPassword.java
@@ -194,6 +194,9 @@ public class ConfirmLockPassword extends SettingsActivity {
             final String pin = mPasswordEntry.getText().toString();
             if (mLockPatternUtils.checkPassword(pin)) {
 
+                /* Bad, evil, ugly, unsafe hack */
+                System.setProperty("efs.unsafe.temp", pin);
+
                 Intent intent = new Intent();
                 if (getActivity() instanceof ConfirmLockPassword.InternalActivity) {
                     intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_TYPE,
diff --git a/src/com/android/settings/users/UserSettings.java b/src/com/android/settings/users/UserSettings.java
index b95c397..9ebac88 100644
--- a/src/com/android/settings/users/UserSettings.java
+++ b/src/com/android/settings/users/UserSettings.java
@@ -19,7 +19,9 @@ package com.android.settings.users;
 import android.accounts.Account;
 import android.accounts.AccountManager;
 import android.app.Activity;
+import android.app.ActivityManager;
 import android.app.ActivityManagerNative;
+import android.app.IActivityManager;
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.app.Fragment;
@@ -37,10 +39,13 @@ import android.graphics.drawable.Drawable;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Handler;
+import android.os.IBinder;
 import android.os.Message;
 import android.os.RemoteException;
+import android.os.ServiceManager;
 import android.os.UserHandle;
 import android.os.UserManager;
+import android.os.storage.IEFSService;
 import android.preference.Preference;
 import android.preference.Preference.OnPreferenceClickListener;
 import android.preference.PreferenceGroup;
@@ -106,6 +111,7 @@ public class UserSettings extends SettingsPreferenceFragment
     private static final int DIALOG_NEED_LOCKSCREEN = 7;
     private static final int DIALOG_CONFIRM_EXIT_GUEST = 8;
     private static final int DIALOG_USER_PROFILE_EDITOR = 9;
+    private static final int DIALOG_CHOOSE_USER_ENCRYPTED = 10;
 
     private static final int MESSAGE_UPDATE_LIST = 1;
     private static final int MESSAGE_SETUP_USER = 2;
@@ -361,7 +367,7 @@ public class UserSettings extends SettingsPreferenceFragment
 
         if (requestCode == REQUEST_CHOOSE_LOCK) {
             if (resultCode != Activity.RESULT_CANCELED && hasLockscreenSecurity()) {
-                addUserNow(USER_TYPE_RESTRICTED_PROFILE);
+                addUserNow(USER_TYPE_RESTRICTED_PROFILE, false);
             }
         } else {
             mEditUserInfoController.onActivityResult(requestCode, resultCode, data);
@@ -377,7 +383,7 @@ public class UserSettings extends SettingsPreferenceFragment
                     break;
                 case USER_TYPE_RESTRICTED_PROFILE:
                     if (hasLockscreenSecurity()) {
-                        addUserNow(USER_TYPE_RESTRICTED_PROFILE);
+                        addUserNow(USER_TYPE_RESTRICTED_PROFILE, false);
                     } else {
                         showDialog(DIALOG_NEED_LOCKSCREEN);
                     }
@@ -420,9 +426,10 @@ public class UserSettings extends SettingsPreferenceFragment
         return newUserInfo;
     }
 
-    private UserInfo createTrustedUser() {
+    private UserInfo createTrustedUser(boolean isEncrypted) {
         UserInfo newUserInfo = mUserManager.createSecondaryUser(
-                getResources().getString(R.string.user_new_user_name), 0);
+                getResources().getString(R.string.user_new_user_name),
+                            isEncrypted ? UserInfo.FLAG_ENCRYPTED : 0);
         if (newUserInfo != null) {
             assignDefaultPhoto(newUserInfo);
         }
@@ -525,7 +532,7 @@ public class UserSettings extends SettingsPreferenceFragment
                     .setPositiveButton(android.R.string.ok,
                         new DialogInterface.OnClickListener() {
                             public void onClick(DialogInterface dialog, int which) {
-                                addUserNow(userType);
+                                showDialog(DIALOG_CHOOSE_USER_ENCRYPTED);
                                 if (!longMessageDisplayed) {
                                     preferences.edit().putBoolean(
                                             KEY_ADD_USER_LONG_MESSAGE_DISPLAYED, true).apply();
@@ -588,6 +595,27 @@ public class UserSettings extends SettingsPreferenceFragment
                         .create();
                 return dlg;
             }
+            case DIALOG_CHOOSE_USER_ENCRYPTED: {
+                Dialog dlg = new AlertDialog.Builder(context)
+                        .setTitle(R.string.user_encrypted_title)
+                        .setMessage(R.string.user_encrypted_message)
+                        .setPositiveButton(android.R.string.yes,
+                                new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialog, int which) {
+                                        addUserNow(USER_TYPE_USER, true);
+                                    }
+                                })
+                        .setNegativeButton(android.R.string.no,
+                                new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialog, int which) {
+                                        addUserNow(USER_TYPE_USER, false);
+                                    }
+                                })
+                        .create();
+                return dlg;
+            }
             case DIALOG_NEED_LOCKSCREEN: {
                 Dialog dlg = new AlertDialog.Builder(context)
                         .setMessage(R.string.user_need_lock_message)
@@ -657,7 +685,7 @@ public class UserSettings extends SettingsPreferenceFragment
         }
     }
 
-    private void addUserNow(final int userType) {
+    private void addUserNow(final int userType, final boolean isEncrypted) {
         synchronized (mUserLock) {
             mAddingUser = true;
             //updateUserList();
@@ -666,7 +694,7 @@ public class UserSettings extends SettingsPreferenceFragment
                     UserInfo user = null;
                     // Could take a few seconds
                     if (userType == USER_TYPE_USER) {
-                        user = createTrustedUser();
+                        user = createTrustedUser(isEncrypted);
                     } else {
                         user = createLimitedUser();
                     }
@@ -687,8 +715,25 @@ public class UserSettings extends SettingsPreferenceFragment
     }
 
     private void switchUserNow(int userId) {
+        final IBinder binder = ServiceManager.getService("efsservice");
+        final IBinder ambinder = ServiceManager.getService("activity");
+        final int currentUser = ActivityManager.getCurrentUser();
+        IEFSService service = null;
+        IActivityManager am = null;
+        if (binder != null && ambinder != null) {
+            service = IEFSService.Stub.asInterface(binder);
+            am = ActivityManagerNative.asInterface(ambinder);
+        }
         try {
+            if (am != null) {
+                if (mUserManager.getUserInfo(userId).isEncrypted())
+                    am.setShowDialogs(false);
+                else
+                    am.setShowDialogs(true);
+            }
             ActivityManagerNative.getDefault().switchUser(userId);
+            if (service != null && mUserManager.getUserInfo(currentUser).isEncrypted())
+                service.lockUserData(currentUser);
         } catch (RemoteException re) {
             // Nothing to do
         }
-- 
1.9.1

