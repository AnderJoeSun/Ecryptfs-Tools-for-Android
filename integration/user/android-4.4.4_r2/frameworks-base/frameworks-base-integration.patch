From e27bdab5db1ff839b33d91a139bf23c2f2e001d4 Mon Sep 17 00:00:00 2001
From: Nicolae-Alexandru Ivan <alexandru.ivan@intel.com>
Date: Tue, 11 Nov 2014 17:16:34 +0200
Subject: [PATCH] Added AlertDialog when attempting to log into different user
 than the one selected at boot

---
 Android.mk                                         |   1 +
 core/java/android/os/IEfsService.aidl              |  11 +
 core/java/android/os/storage/IMountService.java    | 638 ++++++++++++++++++++-
 .../keyguard/KeyguardMultiUserSelectorView.java    |  46 +-
 services/java/com/android/server/EfsService.java   |  41 ++
 services/java/com/android/server/MountService.java | 242 ++++++++
 services/java/com/android/server/SystemServer.java |  14 +-
 7 files changed, 977 insertions(+), 16 deletions(-)
 create mode 100644 core/java/android/os/IEfsService.aidl
 create mode 100644 services/java/com/android/server/EfsService.java

diff --git a/Android.mk b/Android.mk
index bcfc240..fcb5dca 100644
--- a/Android.mk
+++ b/Android.mk
@@ -151,6 +151,7 @@ LOCAL_SRC_FILES += \
 	core/java/android/os/IBatteryPropertiesListener.aidl \
 	core/java/android/os/IBatteryPropertiesRegistrar.aidl \
 	core/java/android/os/ICancellationSignal.aidl \
+	core/java/android/os/IEfsService.aidl \
 	core/java/android/os/IHardwareService.aidl \
 	core/java/android/os/IMessenger.aidl \
 	core/java/android/os/INetworkManagementService.aidl \
diff --git a/core/java/android/os/IEfsService.aidl b/core/java/android/os/IEfsService.aidl
new file mode 100644
index 0000000..21603a7
--- /dev/null
+++ b/core/java/android/os/IEfsService.aidl
@@ -0,0 +1,11 @@
+/*
+* aidl file : frameworks/base/core/java/android/os/IEfsService.aidl
+* This file contains definitions of functions which are exposed by service
+*/
+package android.os;
+/**
+* {@hide}
+*/
+interface IEfsService {
+}
+
diff --git a/core/java/android/os/storage/IMountService.java b/core/java/android/os/storage/IMountService.java
index 51ba2f6..47cabda 100644
--- a/core/java/android/os/storage/IMountService.java
+++ b/core/java/android/os/storage/IMountService.java
@@ -755,7 +755,358 @@ public interface IMountService extends IInterface {
                 }
                 return _result;
             }
-        }
+
+            /**
+             * Create EFS Storage
+             */
+            public int createEfsStorage(String storagePath, String password)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeString(storagePath);
+                    _data.writeString(password);
+                    mRemote.transact(Stub.TRANSACTION_createEfsStorage, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+            /**
+             * Unlock EFS storage
+             */
+            public int unlockEfsStorage(String storagePath, String password)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeString(storagePath);
+                    _data.writeString(password);
+                    mRemote.transact(Stub.TRANSACTION_unlockEfsStorage, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+            /**
+             * Lock EFS Storage
+             */
+            public int lockEfsStorage(String storagePath)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeString(storagePath);
+                    mRemote.transact(Stub.TRANSACTION_lockEfsStorage, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+            /**
+             * Change EFS  storage passwd
+             */
+            public int changePasswordEfsStorage(String storagePath, String oldPassword, String newPassword)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeString(storagePath);
+                    _data.writeString(oldPassword);
+                    _data.writeString(newPassword);
+                    mRemote.transact(Stub.TRANSACTION_changePasswordEfsStorage, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+
+            /**
+             * Remove EFS Storage
+             */
+            public int removeEfsStorage(String storagePath)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeString(storagePath);
+                    mRemote.transact(Stub.TRANSACTION_removeEfsStorage, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+            /**
+             * get EFS Storage status
+             */
+            public int getEfsStorageStat(String storagePath)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeString(storagePath);
+                    mRemote.transact(Stub.TRANSACTION_getEfsStorageStat, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+            /**
+             * recover EFS storage encrypted data and remove storage
+             */
+            public int recoverDataAndRemoveEfsStorage(String storagePath, String password)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeString(storagePath);
+                    _data.writeString(password);
+                    mRemote.transact(Stub.TRANSACTION_recoverDataAndRemoveEfsStorage, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+			/**
+			 * get encryption progress
+			 */
+			public int getEfsEncryptionProgress(String storagePath)
+				throws RemoteException {
+				Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeString(storagePath);
+                    mRemote.transact(Stub.TRANSACTION_getEfsEncryptionProgress, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+			}
+
+            /**
+             * Encrypt user data
+             */
+            public int encryptUserData(int userId, String password)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeInt(userId);
+                    _data.writeString(password);
+                    mRemote.transact(Stub.TRANSACTION_encryptUserData, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+
+
+            /**
+             * unlock user data
+             */
+            public int unlockUserData(int fromInit, int userId, String password)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeInt(fromInit);
+                    _data.writeInt(userId);
+                    _data.writeString(password);
+                    mRemote.transact(Stub.TRANSACTION_unlockUserData, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+            /**
+             * Lock user data
+             */
+            public int lockUserData(int userId)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeInt(userId);
+                    mRemote.transact(Stub.TRANSACTION_lockUserData, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+            /**
+             * Change user data password
+             */
+            public int changeUserDataPassword(int userId, String oldPassword, String newPassword)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeInt(userId);
+                    _data.writeString(oldPassword);
+                    _data.writeString(newPassword);
+                    mRemote.transact(Stub.TRANSACTION_changeUserDataPassword, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+
+            /**
+             * Remove user encrypted data
+             */
+            public int removeUserEncryptedData(int userId)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeInt(userId);
+                    mRemote.transact(Stub.TRANSACTION_removeUserEncryptedData, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+            /**
+             * Get user encrypted data status
+             */
+            public int getUserEncryptedDataStat(int userId)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeInt(userId);
+                    mRemote.transact(Stub.TRANSACTION_getUserEncryptedDataStat, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+            /**
+             * decrypt user data
+             */
+            public int decryptUserData(int userId, String password)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeInt(userId);
+                    _data.writeString(password);
+                    mRemote.transact(Stub.TRANSACTION_decryptUserData, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+
+            /**
+             * restart Android from EFS
+             */
+            public int restartFramework(int userId)
+				throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+                int _result;
+                try {
+                    _data.writeInterfaceToken(DESCRIPTOR);
+                    _data.writeInt(userId);
+                    mRemote.transact(Stub.TRANSACTION_restartFramework, _data, _reply, 0);
+                    _reply.readException();
+                    _result = _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+                return _result;
+            }
+       }
 
         private static final String DESCRIPTOR = "IMountService";
 
@@ -829,6 +1180,38 @@ public interface IMountService extends IInterface {
 
         static final int TRANSACTION_mkdirs = IBinder.FIRST_CALL_TRANSACTION + 34;
 
+        static final int TRANSACTION_createEfsStorage = IBinder.FIRST_CALL_TRANSACTION + 35;
+
+        static final int TRANSACTION_unlockEfsStorage = IBinder.FIRST_CALL_TRANSACTION + 36;
+
+        static final int TRANSACTION_lockEfsStorage = IBinder.FIRST_CALL_TRANSACTION + 37;
+
+        static final int TRANSACTION_changePasswordEfsStorage = IBinder.FIRST_CALL_TRANSACTION + 38;
+
+        static final int TRANSACTION_removeEfsStorage = IBinder.FIRST_CALL_TRANSACTION + 39;
+
+        static final int TRANSACTION_getEfsStorageStat = IBinder.FIRST_CALL_TRANSACTION + 40;
+
+        static final int TRANSACTION_recoverDataAndRemoveEfsStorage = IBinder.FIRST_CALL_TRANSACTION + 41;
+
+        static final int TRANSACTION_encryptUserData = IBinder.FIRST_CALL_TRANSACTION + 42;
+
+        static final int TRANSACTION_unlockUserData = IBinder.FIRST_CALL_TRANSACTION + 43;
+
+        static final int TRANSACTION_lockUserData = IBinder.FIRST_CALL_TRANSACTION + 44;
+
+        static final int TRANSACTION_changeUserDataPassword= IBinder.FIRST_CALL_TRANSACTION + 45;
+
+        static final int TRANSACTION_removeUserEncryptedData = IBinder.FIRST_CALL_TRANSACTION + 46;
+
+        static final int TRANSACTION_decryptUserData = IBinder.FIRST_CALL_TRANSACTION + 47;
+
+        static final int TRANSACTION_getUserEncryptedDataStat = IBinder.FIRST_CALL_TRANSACTION + 48;
+
+        static final int TRANSACTION_getEfsEncryptionProgress = IBinder.FIRST_CALL_TRANSACTION + 49;
+
+        static final int TRANSACTION_restartFramework = IBinder.FIRST_CALL_TRANSACTION + 50;
+
         /**
          * Cast an IBinder object into an IMountService interface, generating a
          * proxy if needed.
@@ -1181,6 +1564,161 @@ public interface IMountService extends IInterface {
                     reply.writeInt(result);
                     return true;
                 }
+                case TRANSACTION_createEfsStorage: {
+                    data.enforceInterface(DESCRIPTOR);
+                    String storagePath;
+                    storagePath = data.readString();
+                    String password;
+                    password = data.readString();
+                    int resultCode = createEfsStorage(storagePath, password);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_unlockEfsStorage: {
+                    data.enforceInterface(DESCRIPTOR);
+                    String storagePath;
+                    storagePath = data.readString();
+                    String password;
+                    password = data.readString();
+                    int resultCode = unlockEfsStorage(storagePath, password);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_lockEfsStorage: {
+                    data.enforceInterface(DESCRIPTOR);
+                    String storagePath;
+                    storagePath = data.readString();
+                    int resultCode = lockEfsStorage(storagePath);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_changePasswordEfsStorage: {
+                    data.enforceInterface(DESCRIPTOR);
+                    String storagePath;
+                    storagePath = data.readString();
+                    String oldPassword;
+                    oldPassword = data.readString();
+                    String newPassword;
+                    newPassword = data.readString();
+                    int resultCode = changePasswordEfsStorage(storagePath, oldPassword, newPassword);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_removeEfsStorage: {
+                    data.enforceInterface(DESCRIPTOR);
+                    String storagePath;
+                    storagePath = data.readString();
+                    int resultCode = removeEfsStorage(storagePath);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_getEfsStorageStat: {
+                    data.enforceInterface(DESCRIPTOR);
+                    String storagePath;
+                    storagePath = data.readString();
+                    int resultCode = getEfsStorageStat(storagePath);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_getEfsEncryptionProgress: {
+                    data.enforceInterface(DESCRIPTOR);
+                    String storagePath;
+                    storagePath = data.readString();
+                    int resultCode = getEfsEncryptionProgress(storagePath);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_encryptUserData: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int userId;
+                    userId = data.readInt();
+                    String password;
+                    password = data.readString();
+                    int resultCode = encryptUserData(userId, password);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                return true;
+                }
+                case TRANSACTION_unlockUserData: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int fromInit;
+                    fromInit = data.readInt();
+                    int userId;
+                    userId = data.readInt();
+                    String password;
+                    password = data.readString();
+                    int resultCode = unlockUserData(fromInit, userId, password);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_lockUserData: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int userId;
+                    userId = data.readInt();
+                    int resultCode = lockUserData(userId);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_changeUserDataPassword: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int userId;
+                    userId = data.readInt();
+                    String oldPassword;
+                    oldPassword = data.readString();
+                    String newPassword;
+                    newPassword = data.readString();
+                    int resultCode = changeUserDataPassword(userId, oldPassword, newPassword);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_removeUserEncryptedData: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int userId;
+                    userId = data.readInt();
+                    int resultCode = removeUserEncryptedData(userId);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_getUserEncryptedDataStat: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int userId;
+                    userId = data.readInt();
+                    int resultCode = getUserEncryptedDataStat(userId);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_decryptUserData: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int userId;
+                    userId = data.readInt();
+                    String password;
+                    password = data.readString();
+                    int resultCode = decryptUserData(userId, password);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
+                case TRANSACTION_restartFramework: {
+                    data.enforceInterface(DESCRIPTOR);
+                    int userId;
+                    userId = data.readInt();
+                    int resultCode = restartFramework(userId);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
             }
             return super.onTransact(code, data, reply, flags);
         }
@@ -1390,7 +1928,7 @@ public interface IMountService extends IInterface {
 
     /**
      * Gets the path on the filesystem for the ASEC container itself.
-     * 
+     *
      * @param cid ASEC container ID
      * @return path to filesystem or {@code null} if it's not found
      * @throws RemoteException
@@ -1412,4 +1950,100 @@ public interface IMountService extends IInterface {
      * external storage data or OBB directory belonging to calling app.
      */
     public int mkdirs(String callingPkg, String path) throws RemoteException;
+
+    /*
+     * Create EFS storage
+     */
+    public int createEfsStorage(String storagePath, String password)
+		throws RemoteException;
+
+    /*
+     * Unlock EFS storage
+     */
+    public int unlockEfsStorage(String storagePath, String password)
+		throws RemoteException;
+
+    /*
+     * Lock EFS storage
+     */
+    public int lockEfsStorage(String storagePath)
+		throws RemoteException;
+
+    /*
+     * Change EFS storage password
+     */
+    public int changePasswordEfsStorage(String storagePath, String oldPassword, String newPassword)
+		throws RemoteException;
+
+    /*
+     * Recover EFS storage data and remove EFS storage
+     */
+    public int recoverDataAndRemoveEfsStorage(String storagePath, String password)
+		throws RemoteException;
+
+    /*
+     * Remove EFS storage
+     */
+    public int removeEfsStorage(String storagePath)
+		throws RemoteException;
+
+    /*
+     * get EFS storage status
+     */
+    public int getEfsStorageStat(String storagePath)
+		throws RemoteException;
+
+	/*
+	 * get EFS encryption progress
+	 */
+	public int getEfsEncryptionProgress(String storagePath)
+		throws RemoteException;
+
+    /*
+     * Encrypt user data
+     */
+    public int encryptUserData(int userId, String password)
+		throws RemoteException;
+
+    /*
+     * Unlock user data
+     */
+    public int unlockUserData(int fromInit, int userId, String password)
+		throws RemoteException;
+
+    /*
+     * lock user data
+     */
+    public int lockUserData(int userId)
+		throws RemoteException;
+
+    /*
+     * change user data password
+     */
+    public int changeUserDataPassword(int userId, String oldPassword, String newPassword)
+		throws RemoteException;
+
+    /*
+     * remove user encrypted data
+     */
+    public int removeUserEncryptedData(int userId)
+		throws RemoteException;
+
+    /*
+     * get user encrypted data status
+     */
+    public int getUserEncryptedDataStat(int userId)
+		throws RemoteException;
+
+    /*
+     * decrypt user data
+     */
+    public int decryptUserData(int userId, String password)
+		throws RemoteException;
+
+    /*
+     * restart Android from EFS
+     */
+    public int restartFramework(int userId)
+        throws RemoteException;
 }
diff --git a/packages/Keyguard/src/com/android/keyguard/KeyguardMultiUserSelectorView.java b/packages/Keyguard/src/com/android/keyguard/KeyguardMultiUserSelectorView.java
index 7975d8e..ad0272a 100644
--- a/packages/Keyguard/src/com/android/keyguard/KeyguardMultiUserSelectorView.java
+++ b/packages/Keyguard/src/com/android/keyguard/KeyguardMultiUserSelectorView.java
@@ -16,7 +16,9 @@
 
 package com.android.keyguard;
 
+import android.app.Activity;
 import android.app.ActivityManagerNative;
+import android.app.AlertDialog;
 import android.content.Context;
 import android.content.pm.UserInfo;
 import android.os.RemoteException;
@@ -25,6 +27,7 @@ import android.util.Log;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.WindowManager;
 import android.widget.FrameLayout;
 
 import java.util.ArrayList;
@@ -38,6 +41,8 @@ public class KeyguardMultiUserSelectorView extends FrameLayout implements View.O
     private ViewGroup mUsersGrid;
     private KeyguardMultiUserAvatar mActiveUserAvatar;
     private KeyguardHostView.UserSwitcherCallback mCallback;
+    private Context mContext;
+    private String dialogMessage = "Cannot log into non decrypted user. Reboot for other user";
     private static final int FADE_OUT_ANIMATION_DURATION = 100;
 
     public KeyguardMultiUserSelectorView(Context context) {
@@ -50,6 +55,7 @@ public class KeyguardMultiUserSelectorView extends FrameLayout implements View.O
 
     public KeyguardMultiUserSelectorView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
+        mContext = context;
     }
 
     protected void onFinishInflate () {
@@ -145,21 +151,35 @@ public class KeyguardMultiUserSelectorView extends FrameLayout implements View.O
                 return;
             } else {
                 // Reset the previously active user to appear inactive
-                mCallback.hideSecurityView(FADE_OUT_ANIMATION_DURATION);
-                setAllClickable(false);
-                avatar.lockPressed(true);
-                mActiveUserAvatar.setActive(false, true, new Runnable() {
-                    @Override
-                    public void run() {
-                        mActiveUserAvatar = avatar;
-                        try {
-                            ActivityManagerNative.getDefault()
+                final int selected_user = android.os.SystemProperties.getInt("efs.selected_user", -1);
+                if (selected_user != -1 && selected_user != avatar.getUserInfo().id) {
+                    final AlertDialog dialog = new AlertDialog.Builder(mContext)
+                        .setMessage(dialogMessage)
+                        .setNeutralButton(R.string.ok, null)
+                        .create();
+                    if (!(mContext instanceof Activity)) {
+                        dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
+                    }
+                    dialog.show();
+                    return;
+                } else {
+                    mCallback.hideSecurityView(FADE_OUT_ANIMATION_DURATION);
+                    setAllClickable(false);
+                    avatar.lockPressed(true);
+                    mActiveUserAvatar.setActive(false, true, new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                mActiveUserAvatar = avatar;
+                                Log.i(TAG, "Switching to " + avatar.getUserInfo().id);
+                                ActivityManagerNative.getDefault()
                                     .switchUser(avatar.getUserInfo().id);
-                        } catch (RemoteException re) {
-                            Log.e(TAG, "Couldn't switch user " + re);
+                            } catch (RemoteException re) {
+                                Log.e(TAG, "Couldn't switch user " + re);
+                            }
                         }
-                    }
-                });
+                    });
+                }
             }
         }
     }
diff --git a/services/java/com/android/server/EfsService.java b/services/java/com/android/server/EfsService.java
new file mode 100644
index 0000000..94cdd0d
--- /dev/null
+++ b/services/java/com/android/server/EfsService.java
@@ -0,0 +1,41 @@
+package com.android.server;
+
+import android.app.ActivityManagerNative;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.IEfsService;
+import android.util.Log;
+
+public class EfsService extends IEfsService.Stub {
+    private static final String TAG = "EfsService";
+    private Context mContext;
+
+    private int selected_user = -1;
+
+    public EfsService(Context context) {
+        super();
+        mContext = context;
+        selected_user = android.os.SystemProperties.getInt("efs.selected_user", -1);
+        mContext.registerReceiver(new BootReceiver(), new IntentFilter(Intent.ACTION_BOOT_COMPLETED));
+    }
+
+    private class BootReceiver extends BroadcastReceiver {
+
+       @Override
+       public void onReceive(Context context, Intent intent) {
+            if (intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)) {
+                if (selected_user > -1) {
+                    try {
+                        ActivityManagerNative.getDefault().switchUser(selected_user);
+                        Log.i(TAG, "Boot completed, switch to user " + selected_user);
+                    } catch (Exception e) {
+                        Log.e(TAG, "Could not switch user", e);
+                    }
+                }
+            }
+       }
+    }
+}
+
diff --git a/services/java/com/android/server/MountService.java b/services/java/com/android/server/MountService.java
index e60231a..d5c1d5a 100644
--- a/services/java/com/android/server/MountService.java
+++ b/services/java/com/android/server/MountService.java
@@ -2830,4 +2830,246 @@ class MountService extends IMountService.Stub
             mConnector.monitor();
         }
     }
+
+    public int createEfsStorage(String storagePath, String password) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "create", storagePath, password);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int unlockEfsStorage(String storagePath, String password) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "unlock", storagePath, password);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+
+    public int lockEfsStorage(String storagePath) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "lock", storagePath);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int changePasswordEfsStorage(String storagePath, String oldPassword, String newPassword) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "change_passwd", storagePath, oldPassword, newPassword);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int removeEfsStorage(String storagePath) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "remove", storagePath);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int getEfsStorageStat(String storagePath) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "stat", storagePath);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int recoverDataAndRemoveEfsStorage(String storagePath, String password) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "recover", storagePath, password);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int getEfsEncryptionProgress(String storagePath) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "get_progress", storagePath);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int encryptUserData(int userId, String password) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "encrypt_user_data", userId, password);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int unlockUserData(int fromInit, int userId, String password) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "unlock_user_data", fromInit, userId, password);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+
+    public int lockUserData(int userId) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "lock_user_data", userId);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int changeUserDataPassword(int userId, String oldPassword, String newPassword) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "change_user_data_passwd", userId, oldPassword, newPassword);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int removeUserEncryptedData(int userId) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "remove_user_encrypted_data", userId);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int decryptUserData(int userId, String password) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "decrypt_user_data", userId, password);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int getUserEncryptedDataStat(int userId) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "user_stat", userId);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
+
+    public int restartFramework(int userId) {
+        int rc = StorageResultCode.OperationSucceeded;
+        final NativeDaemonEvent event;
+        try {
+            event = mConnector.execute("efs", "restart_framework", userId);
+            return Integer.parseInt(event.getMessage());
+        } catch (NativeDaemonConnectorException e) {
+            int code = e.getCode();
+            if (code != VoldResponseCode.OpFailedStorageBusy) {
+                rc = StorageResultCode.OperationFailedInternalError;
+            }
+        }
+        return rc;
+    }
 }
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index a42cbcf..d625395 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -238,6 +238,11 @@ class ServerThread {
                 onlyCore = true;
             }
 
+            final String primaryUserEncrypted = SystemProperties.get("crypto.primary_user");
+            if (("encrypted".equals(primaryUserEncrypted))) {
+                onlyCore = true;
+            }
+
             pm = PackageManagerService.main(context, installer,
                     factoryTest != SystemServer.FACTORY_TEST_OFF,
                     onlyCore);
@@ -770,7 +775,7 @@ class ServerThread {
                 }
             }
 
-            if (!disableNonCoreServices && 
+            if (!disableNonCoreServices &&
                 context.getResources().getBoolean(R.bool.config_dreamsSupported)) {
                 try {
                     Slog.i(TAG, "Dreams Service");
@@ -816,6 +821,13 @@ class ServerThread {
                     reportWtf("starting MediaRouterService", e);
                 }
             }
+            
+            try {
+                Slog.i(TAG, "EFS Service");
+                ServiceManager.addService("EFS", new EfsService(context));
+            } catch (Throwable e) {
+                reportWtf("starting EfsService Service", e);
+            }
         }
 
         // Before things start rolling, be sure we have decided whether
-- 
1.9.1

