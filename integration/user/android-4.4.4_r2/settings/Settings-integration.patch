From d320d9103132b6d27321f6fa345a6c3320408def Mon Sep 17 00:00:00 2001
From: Nicolae-Alexandru Ivan <alexandru.ivan@intel.com>
Date: Mon, 3 Nov 2014 11:17:06 +0200
Subject: [PATCH] Boot into single user

---
 AndroidManifest.xml                                |  27 +
 res/layout/decrypt_user_confirm.xml                |  49 ++
 res/layout/decrypt_user_settings.xml               |  78 +++
 res/layout/encrypt_user_blank.xml                  |  33 +
 res/layout/encrypt_user_confirm.xml                |  49 ++
 res/layout/encrypt_user_password_entry.xml         |  49 ++
 res/layout/encrypt_user_password_field.xml         |  44 ++
 res/layout/encrypt_user_progress.xml               |  80 +++
 res/layout/encrypt_user_select.xml                 |  54 ++
 res/layout/encrypt_user_settings.xml               |  78 +++
 res/layout/encrypt_user_status.xml                 |  40 ++
 res/values/strings.xml                             | 128 ++++
 res/values/styles.xml                              |   4 +
 res/xml/security_settings_encrypted_misc.xml       | 108 +++
 ...gs_unecrypted_device_encrypted_primary_user.xml |  39 ++
 res/xml/security_settings_unencrypted.xml          |   6 +-
 src/com/android/settings/CryptKeeper.java          |  12 +-
 src/com/android/settings/DecryptUserConfirm.java   | 102 +++
 src/com/android/settings/EncryptUser.java          | 739 +++++++++++++++++++++
 src/com/android/settings/EncryptUserConfirm.java   | 157 +++++
 src/com/android/settings/EncryptUserSettings.java  | 223 +++++++
 src/com/android/settings/SecuritySettings.java     |  37 +-
 src/com/android/settings/Settings.java             |   2 +
 23 files changed, 2132 insertions(+), 6 deletions(-)
 create mode 100644 res/layout/decrypt_user_confirm.xml
 create mode 100644 res/layout/decrypt_user_settings.xml
 create mode 100644 res/layout/encrypt_user_blank.xml
 create mode 100644 res/layout/encrypt_user_confirm.xml
 create mode 100644 res/layout/encrypt_user_password_entry.xml
 create mode 100644 res/layout/encrypt_user_password_field.xml
 create mode 100644 res/layout/encrypt_user_progress.xml
 create mode 100644 res/layout/encrypt_user_select.xml
 create mode 100644 res/layout/encrypt_user_settings.xml
 create mode 100644 res/layout/encrypt_user_status.xml
 create mode 100644 res/xml/security_settings_encrypted_misc.xml
 create mode 100644 res/xml/security_settings_unecrypted_device_encrypted_primary_user.xml
 create mode 100644 src/com/android/settings/DecryptUserConfirm.java
 create mode 100644 src/com/android/settings/EncryptUser.java
 create mode 100644 src/com/android/settings/EncryptUserConfirm.java
 create mode 100644 src/com/android/settings/EncryptUserSettings.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index f746f2b..0fe3dfd 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1555,6 +1555,33 @@
             </intent-filter>
         </activity>
 
+        <activity android:name=".EncryptUser"
+                  android:immersive="true"
+                  android:launchMode="singleTop"
+                  android:excludeFromRecents="true"
+                  android:theme="@android:style/Theme.Holo.NoActionBar"
+                  android:configChanges="keyboard|keyboardHidden|uiMode"
+                  android:windowSoftInputMode="adjustResize">
+        </activity>
+
+        <activity android:name=".EncryptUser$FadeToBlack"
+            android:immersive="true"
+            android:launchMode="singleTop"
+            android:theme="@style/CryptKeeperBlankTheme"
+        />
+
+        <activity android:name=".EncryptUserConfirm$Blank"
+            android:immersive="true"
+            android:launchMode="singleTop"
+            android:theme="@style/EncryptUserBlankTheme"
+        />
+
+        <activity android:name=".DecryptUserConfirm$Blank"
+            android:immersive="true"
+            android:launchMode="singleTop"
+            android:theme="@style/EncryptUserBlankTheme"
+        />
+
         <activity android:name=".CryptKeeper$FadeToBlack"
             android:immersive="true"
             android:launchMode="singleTop"
diff --git a/res/layout/decrypt_user_confirm.xml b/res/layout/decrypt_user_confirm.xml
new file mode 100644
index 0000000..e5ea066
--- /dev/null
+++ b/res/layout/decrypt_user_confirm.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    >
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="0dip"
+        android:layout_marginStart="16dp"
+        android:layout_marginEnd="16dp"
+        android:layout_marginTop="16dp"
+        android:layout_weight="1"
+    >
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="8dip"
+            android:layout_marginBottom="16dip"
+            android:textAppearance="?android:attr/textAppearanceMedium"
+            android:text="@string/decrypt_user_final_desc"
+        />
+    </ScrollView>
+
+    <Button android:id="@+id/execute_decrypt_user"
+        android:layout_gravity="center_horizontal"
+        android:layout_marginTop="16dip"
+        android:layout_marginBottom="16dip"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/decrypt_user_button_text"
+        android:gravity="center" />
+
+</LinearLayout>
diff --git a/res/layout/decrypt_user_settings.xml b/res/layout/decrypt_user_settings.xml
new file mode 100644
index 0000000..f4eed96
--- /dev/null
+++ b/res/layout/decrypt_user_settings.xml
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+>
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="0dip"
+        android:layout_marginStart="16dp"
+        android:layout_marginEnd="16dp"
+        android:layout_marginTop="16dp"
+        android:layout_weight="1"
+    >
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+        >
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="8dip"
+                android:layout_marginBottom="16dip"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:text="@string/decrypt_user_desc"
+            />
+            <TextView
+                android:id="@+id/warning_low_charge"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dip"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:textStyle="bold"
+                android:text="@string/encrypt_user_low_charge_text"
+                android:visibility="gone"
+            />
+            <TextView
+                android:id="@+id/warning_unplugged"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dip"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:textStyle="bold"
+                android:text="@string/encrypt_user_unplugged_text"
+                android:visibility="gone"
+            />
+        </LinearLayout>
+
+    </ScrollView>
+
+    <Button
+        android:id="@+id/initiate_decrypt_user"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:layout_marginBottom="16dip"
+        android:layout_marginTop="16dip"
+        android:gravity="center"
+        android:text="@string/decrypt_user_button_text" />
+
+</LinearLayout>
diff --git a/res/layout/encrypt_user_blank.xml b/res/layout/encrypt_user_blank.xml
new file mode 100644
index 0000000..2cd9c91
--- /dev/null
+++ b/res/layout/encrypt_user_blank.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+  -->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:gravity="center_vertical"
+>
+
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:src="@drawable/encroid_progress"
+        android:contentDescription="@null"
+    />
+
+</LinearLayout>
diff --git a/res/layout/encrypt_user_confirm.xml b/res/layout/encrypt_user_confirm.xml
new file mode 100644
index 0000000..6db5b96
--- /dev/null
+++ b/res/layout/encrypt_user_confirm.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    >
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="0dip"
+        android:layout_marginStart="16dp"
+        android:layout_marginEnd="16dp"
+        android:layout_marginTop="16dp"
+        android:layout_weight="1"
+    >
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="8dip"
+            android:layout_marginBottom="16dip"
+            android:textAppearance="?android:attr/textAppearanceMedium"
+            android:text="@string/encrypt_user_final_desc"
+        />
+    </ScrollView>
+
+    <Button android:id="@+id/execute_encrypt_user"
+        android:layout_gravity="center_horizontal"
+        android:layout_marginTop="16dip"
+        android:layout_marginBottom="16dip"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/encrypt_user_button_text"
+        android:gravity="center" />
+
+</LinearLayout>
diff --git a/res/layout/encrypt_user_password_entry.xml b/res/layout/encrypt_user_password_entry.xml
new file mode 100644
index 0000000..5e7c0de
--- /dev/null
+++ b/res/layout/encrypt_user_password_entry.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+**
+** Copyright 2011, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License")
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+>
+    <include layout="@layout/encrypt_user_status" />
+
+    <LinearLayout
+        android:layout_height="wrap_content"
+        android:layout_width="match_parent"
+        android:layout_marginStart="8dip"
+        android:layout_marginEnd="8dip"
+        android:orientation="horizontal"
+    >
+        <include layout="@layout/encrypt_user_password_field" />
+    </LinearLayout>
+
+    <!-- Emergency call button.
+         Text and icon are set by CryptKeeper.updateEmergencyCallButtonState() -->
+    <Button android:id="@+id/emergencyCallButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:layout_marginTop="16dip"
+        style="@*android:style/Widget.Button.Transparent"
+        android:textSize="14sp"
+        android:drawablePadding="6dip"
+    />
+
+</LinearLayout>
diff --git a/res/layout/encrypt_user_password_field.xml b/res/layout/encrypt_user_password_field.xml
new file mode 100644
index 0000000..2553695
--- /dev/null
+++ b/res/layout/encrypt_user_password_field.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+**
+** Copyright 2011, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License")
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<!-- Contents of the password entry field for CryptKeeper. Comes with an IME
+     switcher, if necessary. Assumed to be in a horizontal LinearLayout. -->
+<merge xmlns:android="http://schemas.android.com/apk/res/android">
+    <EditText android:id="@+id/passwordEntry"
+        android:layout_height="wrap_content"
+        android:layout_width="0dip"
+        android:layout_weight="1"
+        android:singleLine="true"
+        android:inputType="textPassword"
+        android:imeOptions="flagForceAscii|actionDone"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+     />
+
+   <ImageView android:id="@+id/switch_ime_button"
+       android:layout_width="wrap_content"
+       android:layout_height="wrap_content"
+       android:src="@drawable/ic_lockscreen_ime"
+       android:clickable="true"
+       android:contentDescription="@string/crypt_keeper_switch_input_method"
+       android:padding="8dip"
+       android:layout_gravity="center"
+       android:background="?android:attr/selectableItemBackground"
+       android:visibility="gone"
+   />
+</merge>
\ No newline at end of file
diff --git a/res/layout/encrypt_user_progress.xml b/res/layout/encrypt_user_progress.xml
new file mode 100644
index 0000000..6b8e65f
--- /dev/null
+++ b/res/layout/encrypt_user_progress.xml
@@ -0,0 +1,80 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+  -->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:padding="16dip"
+    android:orientation="vertical"
+>
+
+    <TextView
+        android:id="@+id/title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:minHeight="48dip"
+        android:layout_alignParentStart="true"
+        android:layout_centerVertical="true"
+        android:textSize="30dip"
+        android:textColor="@color/title_color"
+        android:text="@string/crypt_keeper_setup_title"
+        android:gravity="bottom"
+    />
+
+    <!-- Divider -->
+    <RelativeLayout
+        android:id="@+id/top_divider"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+    >
+        <ProgressBar
+            android:id="@+id/progress_bar"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            style="?android:attr/progressBarStyleHorizontal"
+        />
+    </RelativeLayout>
+
+
+    <TextView
+        android:id="@+id/status"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+    />
+
+    <ImageView
+        android:id="@+id/encroid"
+        android:layout_width="wrap_content"
+        android:layout_height="0dip"
+        android:layout_weight="1"
+        android:layout_gravity="bottom|end"
+        android:src="@drawable/encroid_waiting"
+        android:contentDescription="@null"
+    />
+
+    <Button
+        android:id="@+id/factory_reset"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="32dip"
+        android:layout_gravity="center"
+        android:text="@string/master_clear_button_text"
+        android:visibility="gone"
+    />
+
+</LinearLayout>
diff --git a/res/layout/encrypt_user_select.xml b/res/layout/encrypt_user_select.xml
new file mode 100644
index 0000000..f228ca2
--- /dev/null
+++ b/res/layout/encrypt_user_select.xml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+  -->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+>
+    <ListView
+        android:id="@+id/list"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+    </ListView>
+
+    <TextView
+        android:id="@+id/username"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content">
+    </TextView>
+ 
+    <TextView
+        android:id="@+id/userid"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content">
+    </TextView>
+    
+    <TextView
+        android:id="@+id/encrypted"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content">
+    </TextView>
+
+    <Button
+        android:id="@+id/button"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="@string/encrypt_user_select">
+    </Button>
+
+</LinearLayout>
diff --git a/res/layout/encrypt_user_settings.xml b/res/layout/encrypt_user_settings.xml
new file mode 100644
index 0000000..95ea30c
--- /dev/null
+++ b/res/layout/encrypt_user_settings.xml
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+>
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="0dip"
+        android:layout_marginStart="16dp"
+        android:layout_marginEnd="16dp"
+        android:layout_marginTop="16dp"
+        android:layout_weight="1"
+    >
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+        >
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="8dip"
+                android:layout_marginBottom="16dip"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:text="@string/encrypt_user_desc"
+            />
+            <TextView
+                android:id="@+id/warning_low_charge"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dip"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:textStyle="bold"
+                android:text="@string/encrypt_user_low_charge_text"
+                android:visibility="gone"
+            />
+            <TextView
+                android:id="@+id/warning_unplugged"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dip"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:textStyle="bold"
+                android:text="@string/encrypt_user_unplugged_text"
+                android:visibility="gone"
+            />
+        </LinearLayout>
+
+    </ScrollView>
+    <Button
+        android:id="@+id/initiate_encrypt_user"
+        android:layout_gravity="center_horizontal"
+        android:layout_marginTop="16dip"
+        android:layout_marginBottom="16dip"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/encrypt_user_button_text"
+        android:gravity="center"
+    />
+
+</LinearLayout>
diff --git a/res/layout/encrypt_user_status.xml b/res/layout/encrypt_user_status.xml
new file mode 100644
index 0000000..c7264be
--- /dev/null
+++ b/res/layout/encrypt_user_status.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+**
+** Copyright 2011, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License")
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<!-- Status to show on the left side of lock screen -->
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center_horizontal"
+>
+    <TextView
+        android:id="@+id/status"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="10dip"
+        android:layout_marginStart="8dip"
+        android:layout_marginEnd="8dip"
+        android:textSize="18sp"
+        android:textAppearance="?android:attr/textAppearanceMedium"
+        android:text="@string/enter_password"
+        android:drawableLeft="@*android:drawable/ic_lock_idle_lock"
+        />
+</LinearLayout>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 22eb3e8..25fee29 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -4904,4 +4904,132 @@
 
     <!-- Text to display in regulatory info screen (from device overlay). -->
     <string name="regulatory_info_text"></string>
+
+
+    <!-- Title of the preferences category for preference items to control encryption -->
+    <string name="encrypt_user_settings_title">Encryption</string>
+
+    <!-- Title of the preferences item to control user encryption -->
+    <string name="encrypt_user_encrypt_title" product="tablet">Encrypt my data</string>
+    <!-- Title of the preferences item to control encryption -->
+    <string name="encrypt_user_encrypt_title" product="default">Encrypt my data</string>
+    <string name="decrypt_user_encrypt_title" product="default">Decrypt my data</string>
+
+    <!-- Summary of the preferences item to control encryption, when encryption is inactive -->
+    <string name="encrypt_user_encrypt_summary" product="tablet">
+    Require a numeric PIN or password to decrypt your data each time you
+    login</string>
+    <!-- Summary of the preferences item to control encryption, when encryption is inactive -->
+    <string name="encrypt_user_encrypt_summary" product="default">
+    Require a numeric PIN or password to decrypt your data each time you
+    login</string>
+    <!-- Summary of the preferences item to control encryption, when encryption is active -->
+    <string name="encrypt_user_encrypted_summary">Encrypted</string>
+
+    <!-- Informational text in the first confirmation screen before starting user encryption -->
+    <string name="encrypt_user_desc" product="tablet">
+    This operation will encrypt applications data and media files. You will need to type a numeric PIN
+    or password to decrypt it each time you login. If you interrupt the encryption process, you will lose
+    some or all of your data. Encryption is reversible, so you can restore your data anytime.</string>
+    <!-- Informational text in the first confirmation screen before starting device encryption -->
+    <string name="encrypt_user_desc" product="default">
+    This operation will encrypt applications data and media files. You will need to type a numeric PIN
+    or password to decrypt it each time you login. If you interrupt the encryption process, you will lose
+    some or all of your data. Encryption is reversible, so you can restore your data anytime.e</string>
+
+    <!-- Informational text in the first confirmation screen before starting user decryption -->
+    <string name="decrypt_user_desc" product="tablet">
+    Decrypt your applications data and media files.</string>
+    <!-- Informational text in the first confirmation screen before starting device encryption -->
+    <string name="decrypt_user_desc" product="default">
+    Decrypt your applications data and media files.</string>
+
+    <!-- Button text to start encryption process -->
+    <string name="encrypt_user_button_text" product="tablet">Encrypt my data</string>
+    <!-- Button text to start encryption process -->
+    <string name="encrypt_user_button_text" product="default">Encrypt my data</string>
+
+    <!-- Warning string that will be displayed when encryption cannot be started -->
+    <string name="encrypt_user_low_charge_text">Charge your battery and try again.</string>
+    <!-- Warning string that will be displayed when encryption cannot be started -->
+    <string name="encrypt_user_unplugged_text">Plug in your charger and try again.</string>
+
+    <!-- Dialog title, shown when encryption cannot proceed because a PIN/Password is needed -->
+    <string name="encrypt_user_dialog_need_password_title">No lock screen PIN or password</string>
+    <!-- Dialog message, shown when encryption cannot proceed because a PIN/Password is needed -->
+    <string name="encrypt_user_dialog_need_password_message">You need to set a lock screen PIN or
+    password before you can start encryption.</string>
+
+    <!-- Dialog title, shown when decryption cannot proceed because a PIN/Password is needed -->
+    <string name="decrypt_user_dialog_need_password_title">No lock screen PIN or password</string>
+    <!-- Dialog message, shown when decryption cannot proceed because a PIN/Password is needed -->
+    <string name="decrypt_user_dialog_need_password_message">You need to set a lock screen PIN or
+    password before you can start encryption.</string>
+
+    <!-- Title of the final confirmation screen before starting device encryption -->
+    <string name="encrypt_user_confirm_title">Encrypt?</string>
+    <!-- Title of the final confirmation screen before starting device decryption -->
+    <string name="decrypt_user_confirm_title">Decrypt?</string>
+    <!-- Warning text in the final confirmation screen before starting device encryption -->
+    <string name="encrypt_user_final_desc" product="tablet">
+    Encryption will take some time. Please wait!
+    </string>
+    <!-- Warning text in the final confirmation screen before starting device encryption -->
+    <string name="encrypt_user_final_desc" product="default">
+    Encryption will take some time. Please wait!
+    </string>
+    <string name="decrypt_user_final_desc" product="tablet">
+    Decryption will take some time. Please wait!
+    </string>
+    <!-- Warning text in the final confirmation screen before starting device encryption -->
+    <string name="decrypt_user_final_desc" product="default">
+    Decryption will take some time. Please wait!
+    </string>
+
+
+    <!-- Title of the progress screen while encrypting the device -->
+    <string name="encrypt_user_setup_title">Encrypting user data</string>
+
+    <!-- Informational text on the progress screen while encrypting the device -->
+    <string name="encrypt_user_setup_description" product="tablet">Wait while your data
+    is being encrypted. <xliff:g id="percent" example="50">^1</xliff:g>% complete.</string>
+    <!-- Informational text on the progress screen while encrypting the device -->
+    <string name="encrypt_user_setup_description" product="default">Wait while your data
+    is being encrypted. <xliff:g id="percent" example="50">^1</xliff:g>% complete.</string>
+
+    <!-- Informational text on the password entry screen when password entry fails-->
+    <string name="encrypt_user_cooldown">Try again in <xliff:g id="delay" example="15">^1</xliff:g> seconds.</string>
+
+    <!-- Informational text on the password entry screen prompting the user for their password -->
+    <string name="encrypt_user_enter_password">Type your password</string>
+
+    <!-- Title of the encryption screen when encrypting the device failed -->
+    <string name="encrypt_user_failed_title">Encryption unsuccessful</string>
+
+    <!-- Informational text when encryption fails -->
+    <string name="encrypt_user_failed_summary" product="tablet">
+      Encryption was interrupted and can\'t complete. As a result, the data on
+      your tablet is no longer accessible.
+      \n\n
+      To resume using your tablet, you need to perform a factory reset.
+      When you set up your tablet after the reset, you\'ll have an opportunity
+      to restore any data that was backed up to your Google Account.
+    </string>
+
+    <!-- Informational text when encryption fails -->
+    <string name="encrypt_user_failed_summary" product="default">
+      Encryption was interrupted and can\'t complete. As a result, the data on
+      your phone is no longer accessible.
+      \n\nTo resume using your phone, you need to perform a factory reset.
+      When you set up your phone after the reset, you\'ll have an opportunity
+      to restore any data that was backed up to your Google Account.
+    </string>
+
+    <string name="encrypt_user_select">Select</string>
+
+    <!-- Image button description to switch input method -->
+    <string name="encrypt_user_switch_input_method">Switch input method</string>
+    <string name="decrypt_user_button_text">Decrypt my data</string>
+    <string name="show_password_summary"></string>
+
 </resources>
diff --git a/res/values/styles.xml b/res/values/styles.xml
index eee2cd9..dc69a97 100644
--- a/res/values/styles.xml
+++ b/res/values/styles.xml
@@ -196,6 +196,10 @@
         <item name="android:background">#ff000000</item>
     </style>
 
+    <style name="EncryptUserBlankTheme" parent="@android:style/Theme.Holo.NoActionBar">
+        <item name="android:background">#ff000000</item>
+    </style>
+
     <style name="SecurityPreferenceButtonContainer" parent="@android:style/Holo.SegmentedButton">
         <item name="android:layout_width">match_parent</item>
         <item name="android:layout_height">wrap_content</item>
diff --git a/res/xml/security_settings_encrypted_misc.xml b/res/xml/security_settings_encrypted_misc.xml
new file mode 100644
index 0000000..a260bd7
--- /dev/null
+++ b/res/xml/security_settings_encrypted_misc.xml
@@ -0,0 +1,108 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <PreferenceCategory android:key="sim_lock"
+            android:title="@string/sim_lock_settings_title"
+            android:persistent="false">
+
+        <Preference android:title="@string/sim_lock_settings_category"
+                android:persistent="false">
+            <intent android:action="android.intent.action.MAIN"
+                     android:targetPackage="com.android.settings"
+                     android:targetClass="com.android.settings.IccLockSettings"/>
+        </Preference>
+    </PreferenceCategory>
+
+    <PreferenceCategory android:title="@string/security_passwords_title"
+            android:persistent="false">
+
+        <CheckBoxPreference android:key="show_password"
+                android:title="@string/show_password"
+                android:summary="@string/show_password_summary"
+                android:persistent="false"/>
+    </PreferenceCategory>
+
+    <PreferenceCategory android:key="device_admin_category"
+            android:title="@string/device_admin_title"
+            android:persistent="false">
+
+        <Preference android:title="@string/manage_device_admin"
+                android:summary="@string/manage_device_admin_summary"
+                android:persistent="false"
+                android:fragment="com.android.settings.DeviceAdminSettings"/>
+
+        <CheckBoxPreference
+                android:key="toggle_install_applications"
+                android:title="@string/install_applications"
+                android:summaryOff="@string/install_unknown_applications"
+                android:summaryOn="@string/install_unknown_applications"
+                android:persistent="false" />
+
+        <CheckBoxPreference
+                android:key="toggle_verify_applications"
+                android:title="@string/verify_applications"
+                android:summaryOff="@string/verify_applications_summary"
+                android:summaryOn="@string/verify_applications_summary"
+                android:persistent="false" />
+    </PreferenceCategory>
+
+    <PreferenceCategory android:key="credentials_management"
+            android:title="@string/credentials_title"
+            android:persistent="false">
+        <Preference android:title="@string/trusted_credentials"
+                android:summary="@string/trusted_credentials_summary"
+                android:persistent="false"
+                android:fragment="com.android.settings.TrustedCredentialsSettings"/>
+
+        <Preference android:title="@string/credentials_install"
+                android:summary="@string/credentials_install_summary"
+                android:persistent="false">
+            <intent android:action="android.credentials.INSTALL"
+                    android:targetPackage="com.android.certinstaller"
+                    android:targetClass="com.android.certinstaller.CertInstallerMain"/>
+        </Preference>
+
+        <Preference android:key="reset_credentials"
+                android:title="@string/credentials_reset"
+                android:summary="@string/credentials_reset_summary"
+                android:persistent="false">
+            <intent android:action="com.android.credentials.RESET"
+                    android:targetPackage="com.android.settings"
+                    android:targetClass="com.android.settings.CredentialStorage"/>
+        </Preference>
+    </PreferenceCategory>
+
+ <PreferenceCategory
+        android:key="security_category"
+        android:title="@string/decrypt_user_encrypt_title">
+         <PreferenceScreen
+            android:key="user decryption"
+            android:title="@string/decrypt_user_encrypt_title"
+            android:summary="@string/encrypt_user_encrypt_summary"
+            android:fragment="com.android.settings.EncryptUserSettings" />
+ </PreferenceCategory>
+
+    <PreferenceCategory android:key="app_monitor"
+                        android:title="App Monitor Settings">
+
+            <Preference android:title="Permission Settings"
+                android:summary="Select permissions to be filtered"
+                android:persistent="true"
+                android:fragment="com.android.settings.PermissionMonitorSettings"/>
+    </PreferenceCategory>
+</PreferenceScreen>
diff --git a/res/xml/security_settings_unecrypted_device_encrypted_primary_user.xml b/res/xml/security_settings_unecrypted_device_encrypted_primary_user.xml
new file mode 100644
index 0000000..0c48ed5
--- /dev/null
+++ b/res/xml/security_settings_unecrypted_device_encrypted_primary_user.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <PreferenceCategory
+        android:key="security_category"
+        android:title="@string/crypt_keeper_settings_title">
+
+        <PreferenceScreen
+            android:key="encryption"
+            android:title="@string/crypt_keeper_encrypt_title"
+            android:summary="@string/crypt_keeper_encrypt_summary"
+            android:fragment="com.android.settings.CryptKeeperSettings" />
+
+         <PreferenceScreen
+            android:key="user encryption"
+            android:title="@string/decrypt_user_encrypt_title"
+            android:summary="@string/encrypt_user_encrypted_summary"
+            android:fragment="com.android.settings.EncryptUserSettings"
+            />
+
+    </PreferenceCategory>
+
+
+</PreferenceScreen>
diff --git a/res/xml/security_settings_unencrypted.xml b/res/xml/security_settings_unencrypted.xml
index 00213df..837f49c 100644
--- a/res/xml/security_settings_unencrypted.xml
+++ b/res/xml/security_settings_unencrypted.xml
@@ -25,7 +25,11 @@
             android:title="@string/crypt_keeper_encrypt_title"
             android:summary="@string/crypt_keeper_encrypt_summary"
             android:fragment="com.android.settings.CryptKeeperSettings" />
-    
+         <PreferenceScreen
+            android:key="user encryption"
+            android:title="@string/encrypt_user_encrypt_title"
+            android:summary="@string/encrypt_user_encrypt_summary"
+            android:fragment="com.android.settings.EncryptUserSettings" />
     </PreferenceCategory>
 
 
diff --git a/src/com/android/settings/CryptKeeper.java b/src/com/android/settings/CryptKeeper.java
index 23ec70e..a678cbd 100644
--- a/src/com/android/settings/CryptKeeper.java
+++ b/src/com/android/settings/CryptKeeper.java
@@ -60,6 +60,7 @@ import com.android.internal.statusbar.StatusBarIcon;
 import com.android.internal.telephony.ITelephony;
 import com.android.internal.telephony.Phone;
 import com.android.internal.telephony.PhoneConstants;
+import com.android.settings.EncryptUser;
 
 import java.util.List;
 
@@ -294,7 +295,16 @@ public class CryptKeeper extends Activity implements TextView.OnEditorActionList
 
         // If we are not encrypted or encrypting, get out quickly.
         final String state = SystemProperties.get("vold.decrypt");
-        if (!isDebugView() && ("".equals(state) || DECRYPT_STATE.equals(state))) {
+        final String primaryUserEncrypted = SystemProperties.get("crypto.primary_user");
+
+        if (("encrypted".equals(primaryUserEncrypted))) {
+            Intent intent = new Intent(this, EncryptUser.class);
+			startActivity(intent);
+            finish();
+            return;
+        }
+
+        if (!isDebugView() && ("".equals(state) || DECRYPT_STATE.equals(state) || "decrypted".equals(primaryUserEncrypted))) {
             // Disable the crypt keeper.
             PackageManager pm = getPackageManager();
             ComponentName name = new ComponentName(this, CryptKeeper.class);
diff --git a/src/com/android/settings/DecryptUserConfirm.java b/src/com/android/settings/DecryptUserConfirm.java
new file mode 100644
index 0000000..8c6a528
--- /dev/null
+++ b/src/com/android/settings/DecryptUserConfirm.java
@@ -0,0 +1,102 @@
+package com.android.settings;
+
+import com.android.settings.CryptKeeperConfirm.Blank;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.IBinder;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.app.StatusBarManager;
+import android.os.ServiceManager;
+import android.os.storage.IMountService;
+import android.os.ServiceManager;
+import android.os.IBinder;
+import android.os.storage.IMountService;
+import android.app.ActivityManager;
+
+public class DecryptUserConfirm extends Fragment{
+       private static final String TAG = "DecryptUser";
+       public static class Blank extends Activity {
+            private Handler mHandler = new Handler();
+
+            @Override
+            public void onCreate(Bundle savedInstanceState) {
+                super.onCreate(savedInstanceState);
+
+                setContentView(R.layout.encrypt_user_blank);
+
+                if (Utils.isMonkeyRunning()) {
+                    finish();
+                }
+
+                StatusBarManager sbm = (StatusBarManager) getSystemService(Context.STATUS_BAR_SERVICE);
+                sbm.disable(StatusBarManager.DISABLE_EXPAND
+                        | StatusBarManager.DISABLE_NOTIFICATION_ICONS
+                        | StatusBarManager.DISABLE_NOTIFICATION_ALERTS
+                        | StatusBarManager.DISABLE_SYSTEM_INFO
+                        | StatusBarManager.DISABLE_HOME
+                        | StatusBarManager.DISABLE_RECENT
+                        | StatusBarManager.DISABLE_BACK);
+
+                // Post a delayed message in 700 milliseconds to enable encryption.
+                // NOTE: The animation on this activity is set for 500 milliseconds
+                // I am giving it a little extra time to complete.
+               mHandler.postDelayed(new Runnable() {
+                    public void run() {
+                        IBinder service = ServiceManager.getService("mount");
+                        if (service == null) {
+                            Log.e(TAG, "Failed to find the mount service");
+                            finish();
+                            return;
+                        }
+
+                        IMountService mountService = IMountService.Stub.asInterface(service);
+                        try {
+                            Bundle args = getIntent().getExtras();
+                            final int currentUserId = ActivityManager.getCurrentUser();
+                mountService.decryptUserData(currentUserId, args.getString("password"));
+                        } catch (Exception e) {
+                            Log.e(TAG, "Error while encrypting...", e);
+                        }
+                    }
+                }, 500);
+            }
+        }
+
+        private View mContentView;
+        private Button mFinalButton;
+        private Button.OnClickListener mFinalClickListener = new Button.OnClickListener() {
+
+            public void onClick(View v) {
+                if (Utils.isMonkeyRunning()) {
+                    return;
+                }
+
+                Intent intent = new Intent(getActivity(), Blank.class);
+                intent.putExtras(getArguments());
+
+                startActivity(intent);
+            }
+        };
+
+        private void establishFinalConfirmationState() {
+            mFinalButton = (Button) mContentView.findViewById(R.id.execute_decrypt_user);
+            mFinalButton.setOnClickListener(mFinalClickListener);
+        }
+
+        @Override
+        public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                Bundle savedInstanceState) {
+            mContentView = inflater.inflate(R.layout.decrypt_user_confirm, null);
+            establishFinalConfirmationState();
+            return mContentView;
+        }
+}
diff --git a/src/com/android/settings/EncryptUser.java b/src/com/android/settings/EncryptUser.java
new file mode 100644
index 0000000..d92d18a
--- /dev/null
+++ b/src/com/android/settings/EncryptUser.java
@@ -0,0 +1,739 @@
+package com.android.settings;
+
+import android.app.Activity;
+import android.app.StatusBarManager;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.media.AudioManager;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Message;
+import android.os.PowerManager;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.SystemClock;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.os.storage.IMountService;
+import android.provider.Settings;
+import android.telephony.TelephonyManager;
+import android.text.Editable;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnKeyListener;
+import android.view.View.OnTouchListener;
+import android.view.inputmethod.EditorInfo;
+import android.view.inputmethod.InputMethodInfo;
+import android.view.inputmethod.InputMethodManager;
+import android.view.inputmethod.InputMethodSubtype;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemClickListener;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.ListView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+import com.android.internal.telephony.ITelephony;
+import com.android.internal.telephony.Phone;
+import com.android.internal.telephony.PhoneConstants;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Set;
+
+public class EncryptUser extends Activity implements TextView.OnEditorActionListener,
+OnKeyListener, OnTouchListener, TextWatcher {
+
+    private static final String TAG = "EncryptUser";
+    private static final int NOT_ENCRYPTED = 1;
+    private static final int ENCRYPTION_COMPLETED = 3;
+    /** Message sent to us to cool-down (waste user's time between password attempts) */
+    private static final int MESSAGE_COOLDOWN = 2;
+    /** Message sent to us to indicate alerting the user that we are waiting for password entry */
+    private static final int MESSAGE_NOTIFY = 3;
+
+    // Constants used to control policy.
+    private static final int MAX_FAILED_ATTEMPTS = 30;
+    private static final int COOL_DOWN_ATTEMPTS = 10;
+    private static final int COOL_DOWN_INTERVAL = 30; // 30 seconds
+
+    // Intent action for launching the Emergency Dialer activity.
+    static final String ACTION_EMERGENCY_DIAL = "com.android.phone.EmergencyDialer.DIAL";
+
+    private AudioManager mAudioManager;
+    PowerManager.WakeLock mWakeLock;
+    private EditText mPasswordEntry;
+
+    /** When encryption is detected, this flag indicates whether or not we've checked for errors. */
+    private boolean mValidationComplete;
+    private boolean mValidationRequested;
+    /** A flag to indicate that the volume is in a bad state (e.g. partially encrypted). */
+    private boolean mEncryptionGoneBad;
+    /** A flag to indicate when the back event should be ignored */
+    private boolean mIgnoreBack = false;
+    private int mCooldown;
+    /** Number of calls to {@link #notifyUser()} to ignore before notifying. */
+    private int mNotificationCountdown = 0;
+    private int failedAttempts = 0;
+
+    private boolean selectedUserEncrypted;
+    private int selectedUser;
+
+    /**
+     * Used to propagate state through configuration changes (e.g. screen rotation)
+     */
+    private static class NonConfigurationInstanceState {
+        final PowerManager.WakeLock wakelock;
+
+        NonConfigurationInstanceState(PowerManager.WakeLock _wakelock) {
+            wakelock = _wakelock;
+        }
+    }
+
+    /**
+     * Activity used to fade the screen to black after the password is entered.
+     */
+    public static class FadeToBlack extends Activity {
+        @Override
+        public void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+            setContentView(R.layout.encrypt_user_blank);
+        }
+        /** Ignore all back events. */
+        @Override
+        public void onBackPressed() {
+            return;
+        }
+    }
+
+    private class DecryptTask extends AsyncTask<String, Void, Integer> {
+        @Override
+        protected Integer doInBackground(String... params) {
+            final IMountService service = getMountService();
+            try {
+                return service.unlockUserData(1, selectedUser, params[0]);
+            } catch (Exception e) {
+                Log.e(TAG, "Error while decrypting...", e);
+                return -1;
+            }
+        }
+
+        @Override
+        protected void onPostExecute(Integer result) {
+            if (result == 0) {
+                Intent intent = new Intent(EncryptUser.this, FadeToBlack.class);
+                finish();
+                startActivity(intent);
+            }
+            failedAttempts ++;
+            if (failedAttempts == MAX_FAILED_ATTEMPTS) {
+                // Factory reset the device.
+                sendBroadcast(new Intent("android.intent.action.MASTER_CLEAR"));
+            } else if ((failedAttempts % COOL_DOWN_ATTEMPTS) == 0) {
+                mCooldown = COOL_DOWN_INTERVAL;
+                cooldown();
+            } else {
+                final TextView status = (TextView) findViewById(R.id.status);
+                status.setText(R.string.try_again);
+                // Reenable the password entry
+                mPasswordEntry.setEnabled(true);
+            }
+        }
+    }
+
+
+    private class ValidationTask extends AsyncTask<Void, Void, Boolean> {
+        @Override
+        protected Boolean doInBackground(Void... params) {
+            final IMountService service = getMountService();
+            try {
+                Log.d(TAG, "Validating encryption state.");
+                int state = service.getUserEncryptedDataStat(0);
+                if (state == NOT_ENCRYPTED) {
+                    Log.w(TAG, "Unexpectedly in EncryptUser even though there is no encryption.");
+                    return true; // Unexpected, but fine, I guess...
+                }
+                return state == ENCRYPTION_COMPLETED;
+            } catch (RemoteException e) {
+                Log.w(TAG, "Unable to get encryption state properly");
+                return true;
+            }
+        }
+
+        @Override
+        protected void onPostExecute(Boolean result) {
+            mValidationComplete = true;
+            if (Boolean.FALSE.equals(result)) {
+                Log.w(TAG, "Incomplete, or corrupted encryption detected. Prompting user to wipe.");
+                mEncryptionGoneBad = true;
+            } else {
+                Log.d(TAG, "Encryption state validated. Proceeding to configure UI");
+            }
+            setupUi();
+        }
+    }
+
+    private final Handler mHandler = new Handler() {
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+            case MESSAGE_COOLDOWN:
+                cooldown();
+                break;
+
+            case MESSAGE_NOTIFY:
+                notifyUser();
+                break;
+            }
+        }
+    };
+
+    /**
+     * Notify the user that we are awaiting input. Currently this sends an audio alert.
+     */
+    private void notifyUser() {
+        if (mNotificationCountdown > 0) {
+            --mNotificationCountdown;
+        } else if (mAudioManager != null) {
+            try {
+                // Play the standard keypress sound at full volume. This should be available on
+                // every device. We cannot play a ringtone here because media services aren't
+                // available yet. A DTMF-style tone is too soft to be noticed, and might not exist
+                // on tablet devices. The idea is to alert the user that something is needed: this
+                // does not have to be pleasing.
+                mAudioManager.playSoundEffect(AudioManager.FX_KEYPRESS_STANDARD, 100);
+            } catch (Exception e) {
+                Log.w(TAG, "notifyUser: Exception while playing sound: " + e);
+            }
+        }
+        // Notify the user again in 5 seconds.
+        mHandler.removeMessages(MESSAGE_NOTIFY);
+        mHandler.sendEmptyMessageDelayed(MESSAGE_NOTIFY, 5 * 1000);
+    }
+
+    /**
+     * Ignore back events after the user has entered the decrypt screen and while the device is
+     * encrypting.
+     */
+    @Override
+    public void onBackPressed() {
+        if (mIgnoreBack)
+            return;
+        super.onBackPressed();
+    }
+
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // Disable the status bar, but do NOT disable back because the user needs a way to go
+        // from keyboard settings and back to the password screen.
+        StatusBarManager sbm = (StatusBarManager) getSystemService(Context.STATUS_BAR_SERVICE);
+        sbm.disable(StatusBarManager.DISABLE_EXPAND
+                | StatusBarManager.DISABLE_NOTIFICATION_ICONS
+                | StatusBarManager.DISABLE_NOTIFICATION_ALERTS
+                | StatusBarManager.DISABLE_SYSTEM_INFO
+                | StatusBarManager.DISABLE_HOME
+                | StatusBarManager.DISABLE_RECENT);
+
+        setAirplaneModeIfNecessary();
+        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+        // Check for (and recover) retained instance data
+        final Object lastInstance = getLastNonConfigurationInstance();
+        if (lastInstance instanceof NonConfigurationInstanceState) {
+            NonConfigurationInstanceState retained = (NonConfigurationInstanceState) lastInstance;
+            mWakeLock = retained.wakelock;
+            Log.d(TAG, "Restoring wakelock from NonConfigurationInstanceState");
+        }
+    }
+
+    /**
+     * Initializes the UI based on the current state of encryption.
+     * This is idempotent - calling repeatedly will simply re-initialize the UI.
+     */
+    private void setupUi() {
+        // if (mEncryptionGoneBad) {
+        //     setContentView(R.layout.crypt_keeper_progress);
+        //     showFactoryReset();
+        //     return;
+        // }
+
+        final String state = SystemProperties.get("crypto.primary_user");
+        if (mValidationComplete) {
+            //setContentView(R.layout.encrypt_user_password_entry);
+            setContentView(R.layout.encrypt_user_select);
+            //passwordEntryInit();
+            UserSelect();
+        } else if (!mValidationRequested) {
+            // We're supposed to be encrypted, but no validation has been done.
+            new ValidationTask().execute((Void[]) null);
+            mValidationRequested = true;
+        }
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+        mHandler.removeMessages(MESSAGE_COOLDOWN);
+        mHandler.removeMessages(MESSAGE_NOTIFY);
+    }
+
+    /**
+     * Note, we defer the state check and screen setup to onStart() because this will be
+     * re-run if the user clicks the power button (sleeping/waking the screen), and this is
+     * especially important if we were to lose the wakelock for any reason.
+     */
+    @Override
+    public void onStart() {
+        super.onStart();
+        setupUi();
+    }
+
+    /**
+     * Reconfiguring, so propagate the wakelock to the next instance.  This runs between onStop()
+     * and onDestroy() and only if we are changing configuration (e.g. rotation).  Also clears
+     * mWakeLock so the subsequent call to onDestroy does not release it.
+     */
+    @Override
+    public Object onRetainNonConfigurationInstance() {
+        NonConfigurationInstanceState state = new NonConfigurationInstanceState(mWakeLock);
+        Log.d(TAG, "Handing wakelock off to NonConfigurationInstanceState");
+        mWakeLock = null;
+        return state;
+    }
+
+    /**
+     * Method adapted from com.android.inputmethod.latin.Utils
+     *
+     * @param imm The input method manager
+     * @param shouldIncludeAuxiliarySubtypes
+     * @return true if we have multiple IMEs to choose from
+     */
+    private boolean hasMultipleEnabledIMEsOrSubtypes(InputMethodManager imm,
+            final boolean shouldIncludeAuxiliarySubtypes) {
+        final List<InputMethodInfo> enabledImis = imm.getEnabledInputMethodList();
+
+        // Number of the filtered IMEs
+        int filteredImisCount = 0;
+
+        for (InputMethodInfo imi : enabledImis) {
+            // We can return true immediately after we find two or more filtered IMEs.
+            if (filteredImisCount > 1) return true;
+            final List<InputMethodSubtype> subtypes =
+                    imm.getEnabledInputMethodSubtypeList(imi, true);
+            // IMEs that have no subtypes should be counted.
+            if (subtypes.isEmpty()) {
+                ++filteredImisCount;
+                continue;
+            }
+
+            int auxCount = 0;
+            for (InputMethodSubtype subtype : subtypes) {
+                if (subtype.isAuxiliary()) {
+                    ++auxCount;
+                }
+            }
+            final int nonAuxCount = subtypes.size() - auxCount;
+
+            // IMEs that have one or more non-auxiliary subtypes should be counted.
+            // If shouldIncludeAuxiliarySubtypes is true, IMEs that have two or more auxiliary
+            // subtypes should be counted as well.
+            if (nonAuxCount > 0 || (shouldIncludeAuxiliarySubtypes && auxCount > 1)) {
+                ++filteredImisCount;
+                continue;
+            }
+        }
+
+        return filteredImisCount > 1
+        // imm.getEnabledInputMethodSubtypeList(null, false) will return the current IME's enabled
+        // input method subtype (The current IME should be LatinIME.)
+                || imm.getEnabledInputMethodSubtypeList(null, false).size() > 1;
+    }
+
+
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+
+        if (mWakeLock != null) {
+            Log.d(TAG, "Releasing and destroying wakelock");
+            mWakeLock.release();
+            mWakeLock = null;
+        }
+    }
+
+    private void showFactoryReset() {
+        // Hide the encryption-bot to make room for the "factory reset" button
+        findViewById(R.id.encroid).setVisibility(View.GONE);
+
+        // Show the reset button, failure text, and a divider
+        final Button button = (Button) findViewById(R.id.factory_reset);
+        button.setVisibility(View.VISIBLE);
+        button.setOnClickListener(new OnClickListener() {
+                @Override
+            public void onClick(View v) {
+                // Factory reset the device.
+                sendBroadcast(new Intent("android.intent.action.MASTER_CLEAR"));
+            }
+        });
+
+        // Alert the user of the failure.
+        ((TextView) findViewById(R.id.title)).setText(R.string.encrypt_user_failed_title);
+        ((TextView) findViewById(R.id.status)).setText(R.string.encrypt_user_failed_summary);
+
+        final View view = findViewById(R.id.bottom_divider);
+        // TODO(viki): Why would the bottom divider be missing in certain layouts? Investigate.
+        if (view != null) {
+            view.setVisibility(View.VISIBLE);
+        }
+    }
+
+    /** Disable password input for a while to force the user to waste time between retries */
+    private void cooldown() {
+        final TextView status = (TextView) findViewById(R.id.status);
+
+        if (mCooldown <= 0) {
+            // Re-enable the password entry and back presses.
+            mPasswordEntry.setEnabled(true);
+            mIgnoreBack = false;
+            status.setText(R.string.enter_password);
+        } else {
+            CharSequence template = getText(R.string.encrypt_user_cooldown);
+            status.setText(TextUtils.expandTemplate(template, Integer.toString(mCooldown)));
+
+            mCooldown--;
+            mHandler.removeMessages(MESSAGE_COOLDOWN);
+            mHandler.sendEmptyMessageDelayed(MESSAGE_COOLDOWN, 1000); // Tick every second
+        }
+    }
+
+    private static class UserInfo {
+        public boolean encrypted;
+        public int userId;
+
+        public UserInfo(boolean e, int u) {
+            encrypted = e;
+            userId = u;
+        }
+    }
+
+    private static class UserList {
+        private static HashMap<String, UserInfo> userList;
+
+        public UserList() {
+            userList = new HashMap<String, UserInfo>();
+
+            for (String s : SystemProperties.get("efs.encrypted_list").split(" ")) {
+                if (s.contains(",")) {
+                    String info[] = s.split(",");
+                    userList.put(info[0], new UserInfo(true, Integer.parseInt(info[1])));
+                }
+            }
+
+            for (String s : SystemProperties.get("efs.unencrypted_list").split(" ")) {
+                if (s.contains(",")) {
+                    String info[] = s.split(",");
+                    userList.put(info[0], new UserInfo(false, Integer.parseInt(info[1])));
+                }
+            }
+        }
+
+        public static String[] GetUserList() {
+            return userList.keySet().toArray(new String[userList.size()]);
+        }
+
+        public static int getUserId(String userName) {
+            return userList.get(userName).userId;
+        }
+
+        public static boolean isUserEncrypted(String userName) {
+            return userList.get(userName).encrypted;
+        }
+    }
+
+    private void UserSelect() {
+        final Button button = (Button) findViewById(R.id.button);
+        final ListView listView = (ListView) findViewById(R.id.list);
+        final UserList userList = new UserList();
+        String values[] = userList.GetUserList();
+
+        ArrayAdapter<String> adapter = new ArrayAdapter<String> (this,
+            android.R.layout.simple_list_item_1, android.R.id.text1, values);
+
+        listView.setAdapter(adapter);
+
+        listView.setOnItemClickListener(new OnItemClickListener() {
+
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view,
+                int position, long id) {
+
+                String userName = (String) listView.getItemAtPosition(position);
+                int userId = userList.getUserId(userName);
+
+                ((TextView) findViewById(R.id.username)).setText(userName);
+                ((TextView) findViewById(R.id.userid)).setText(String.valueOf(userId));
+                ((TextView) findViewById(R.id.encrypted)).setText(
+                    userList.isUserEncrypted(userName) ? "Encrypted" : "Not encrypted");
+
+                selectedUser = userId;
+                selectedUserEncrypted = userList.isUserEncrypted(userName);
+            }
+        });
+
+        button.setOnClickListener(new OnClickListener() {
+
+            @Override
+            public void onClick(View view) {
+                if (selectedUserEncrypted) {
+                    setContentView(R.layout.encrypt_user_password_entry);
+                    passwordEntryInit();
+                } else {
+                    final IMountService service = getMountService();
+                    try {
+                        service.restartFramework(selectedUser);
+                    }
+                    catch (Exception e) {
+                        Log.e(TAG, "Baaad");
+                    }
+                }
+            }
+        });
+    }
+
+    private void passwordEntryInit() {
+        mPasswordEntry = (EditText) findViewById(R.id.passwordEntry);
+        mPasswordEntry.setOnEditorActionListener(this);
+        mPasswordEntry.requestFocus();
+        // Become quiet when the user interacts with the Edit text screen.
+        mPasswordEntry.setOnKeyListener(this);
+        mPasswordEntry.setOnTouchListener(this);
+        mPasswordEntry.addTextChangedListener(this);
+
+        // Disable the Emergency call button if the device has no voice telephone capability
+        final TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
+        if (!tm.isVoiceCapable()) {
+            final View emergencyCall = findViewById(R.id.emergencyCallButton);
+            if (emergencyCall != null) {
+                Log.d(TAG, "Removing the emergency Call button");
+                emergencyCall.setVisibility(View.GONE);
+            }
+        }
+
+        final View imeSwitcher = findViewById(R.id.switch_ime_button);
+        final InputMethodManager imm = (InputMethodManager) getSystemService(
+                Context.INPUT_METHOD_SERVICE);
+        if (imeSwitcher != null && hasMultipleEnabledIMEsOrSubtypes(imm, false)) {
+            imeSwitcher.setVisibility(View.VISIBLE);
+            imeSwitcher.setOnClickListener(new OnClickListener() {
+                    @Override
+                public void onClick(View v) {
+                    imm.showInputMethodPicker();
+                }
+            });
+        }
+
+        // We want to keep the screen on while waiting for input. In minimal boot mode, the device
+        // is completely non-functional, and we want the user to notice the device and enter a
+        // password.
+        if (mWakeLock == null) {
+            Log.d(TAG, "Acquiring wakelock.");
+            final PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
+            if (pm != null) {
+                mWakeLock = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, TAG);
+                mWakeLock.acquire();
+            }
+        }
+        // Asynchronously throw up the IME, since there are issues with requesting it to be shown
+        // immediately.
+        mHandler.postDelayed(new Runnable() {
+            @Override public void run() {
+                imm.showSoftInputUnchecked(0, null);
+            }
+        }, 0);
+
+        updateEmergencyCallButtonState();
+        // Notify the user in 120 seconds that we are waiting for him to enter the password.
+        mHandler.removeMessages(MESSAGE_NOTIFY);
+        mHandler.sendEmptyMessageDelayed(MESSAGE_NOTIFY, 120 * 1000);
+    }
+
+    private IMountService getMountService() {
+        final IBinder service = ServiceManager.getService("mount");
+        if (service != null) {
+            return IMountService.Stub.asInterface(service);
+        }
+        return null;
+    }
+
+    @Override
+    public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
+        if (actionId == EditorInfo.IME_NULL || actionId == EditorInfo.IME_ACTION_DONE) {
+            // Get the password
+            final String password = v.getText().toString();
+
+            if (TextUtils.isEmpty(password)) {
+                return true;
+            }
+
+            // Now that we have the password clear the password field.
+            v.setText(null);
+
+            // Disable the password entry and back keypress while checking the password. These
+            // we either be re-enabled if the password was wrong or after the cooldown period.
+            mPasswordEntry.setEnabled(false);
+            mIgnoreBack = true;
+
+            Log.d(TAG, "Attempting to send command to decrypt");
+            new DecryptTask().execute(password);
+
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Set airplane mode on the device if it isn't an LTE device.
+     * Full story: In minimal boot mode, we cannot save any state. In particular, we cannot save
+     * any incoming SMS's. So SMSs that are received here will be silently dropped to the floor.
+     * That is bad. Also, we cannot receive any telephone calls in this state. So to avoid
+     * both these problems, we turn the radio off. However, on certain networks turning on and
+     * off the radio takes a long time. In such cases, we are better off leaving the radio
+     * running so the latency of an E911 call is short.
+     * The behavior after this is:
+     * 1. Emergency dialing: the emergency dialer has logic to force the device out of
+     *    airplane mode and restart the radio.
+     * 2. Full boot: we read the persistent settings from the previous boot and restore the
+     *    radio to whatever it was before it restarted. This also happens when rebooting a
+     *    phone that has no encryption.
+     */
+    private final void setAirplaneModeIfNecessary() {
+        final boolean isLteDevice =
+                TelephonyManager.getDefault().getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE;
+        if (!isLteDevice) {
+            Log.d(TAG, "Going into airplane mode.");
+            Settings.Global.putInt(getContentResolver(), Settings.Global.AIRPLANE_MODE_ON, 1);
+            final Intent intent = new Intent(Intent.ACTION_AIRPLANE_MODE_CHANGED);
+            intent.putExtra("state", true);
+            sendBroadcastAsUser(intent, UserHandle.ALL);
+        }
+    }
+
+    /**
+     * Code to update the state of, and handle clicks from, the "Emergency call" button.
+     *
+     * This code is mostly duplicated from the corresponding code in
+     * LockPatternUtils and LockPatternKeyguardView under frameworks/base.
+     */
+    private void updateEmergencyCallButtonState() {
+        final Button emergencyCall = (Button) findViewById(R.id.emergencyCallButton);
+        // The button isn't present at all in some configurations.
+        if (emergencyCall == null)
+            return;
+
+        if (isEmergencyCallCapable()) {
+            emergencyCall.setVisibility(View.VISIBLE);
+            emergencyCall.setOnClickListener(new View.OnClickListener() {
+                    @Override
+
+                    public void onClick(View v) {
+                        takeEmergencyCallAction();
+                    }
+                });
+        } else {
+            emergencyCall.setVisibility(View.GONE);
+            return;
+        }
+
+        final int newState = TelephonyManager.getDefault().getCallState();
+        int textId;
+        if (newState == TelephonyManager.CALL_STATE_OFFHOOK) {
+            // Show "return to call" text and show phone icon
+            textId = R.string.cryptkeeper_return_to_call;
+            final int phoneCallIcon = R.drawable.stat_sys_phone_call;
+            emergencyCall.setCompoundDrawablesWithIntrinsicBounds(phoneCallIcon, 0, 0, 0);
+        } else {
+            textId = R.string.cryptkeeper_emergency_call;
+            final int emergencyIcon = R.drawable.ic_emergency;
+            emergencyCall.setCompoundDrawablesWithIntrinsicBounds(emergencyIcon, 0, 0, 0);
+        }
+        emergencyCall.setText(textId);
+    }
+
+    private boolean isEmergencyCallCapable() {
+        return getResources().getBoolean(com.android.internal.R.bool.config_voice_capable);
+    }
+
+    private void takeEmergencyCallAction() {
+        if (TelephonyManager.getDefault().getCallState() == TelephonyManager.CALL_STATE_OFFHOOK) {
+            resumeCall();
+        } else {
+            launchEmergencyDialer();
+        }
+    }
+
+    private void resumeCall() {
+        final ITelephony phone = ITelephony.Stub.asInterface(ServiceManager.checkService("phone"));
+        if (phone != null) {
+            try {
+                phone.showCallScreen();
+            } catch (RemoteException e) {
+                Log.e(TAG, "Error calling ITelephony service: " + e);
+            }
+        }
+    }
+
+    private void launchEmergencyDialer() {
+        final Intent intent = new Intent(ACTION_EMERGENCY_DIAL);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
+                        | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
+        startActivity(intent);
+    }
+
+    /**
+     * Listen to key events so we can disable sounds when we get a keyinput in EditText.
+     */
+    private void delayAudioNotification() {
+               mNotificationCountdown = 20;
+    }
+
+    @Override
+    public boolean onKey(View v, int keyCode, KeyEvent event) {
+        delayAudioNotification();
+        return false;
+    }
+
+    @Override
+    public boolean onTouch(View v, MotionEvent event) {
+        delayAudioNotification();
+        return false;
+    }
+
+    @Override
+    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+        return;
+    }
+
+    @Override
+    public void onTextChanged(CharSequence s, int start, int before, int count) {
+        delayAudioNotification();
+    }
+
+    @Override
+    public void afterTextChanged(Editable s) {
+        return;
+    }
+
+
+}
diff --git a/src/com/android/settings/EncryptUserConfirm.java b/src/com/android/settings/EncryptUserConfirm.java
new file mode 100644
index 0000000..4c2fc9a
--- /dev/null
+++ b/src/com/android/settings/EncryptUserConfirm.java
@@ -0,0 +1,157 @@
+package com.android.settings;
+
+import com.android.settings.CryptKeeperConfirm.Blank;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.IBinder;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.ProgressBar;
+import android.app.StatusBarManager;
+import android.os.ServiceManager;
+import android.os.storage.IMountService;
+import android.app.ActivityManager;
+import android.os.ServiceManager;
+import android.os.Message;
+import android.os.SystemProperties;
+import android.os.storage.IMountService;
+import android.os.HandlerThread;
+import android.app.ActivityManager;
+import android.content.ComponentName;
+import android.content.pm.PackageManager;
+import java.security.NoSuchAlgorithmException;
+import java.security.MessageDigest;
+import com.android.settings.CryptKeeper;
+
+public class EncryptUserConfirm extends Fragment{
+        private static final String TAG = "EncryptUser";
+        private static final int progress_max = 100;
+        private static final int shaLength = 10;
+        private static final String propertyPrefix = "efs.encrypt.progress_";
+        private static final String userPath = "/data/user/";
+        public static class Blank extends Activity {
+            private Handler mHandler = new Handler() {
+				@Override
+				public void handleMessage(Message msg) {
+					updateProgress();
+				}
+			};
+
+            private String getPropertyName() throws NoSuchAlgorithmException {
+                MessageDigest sha = MessageDigest.getInstance("SHA-512");
+                final int currentUserId = ActivityManager.getCurrentUser();
+                final String currentUserPath = new StringBuilder(userPath).append(currentUserId).toString();
+                byte[] digest = sha.digest(currentUserPath.getBytes());
+                StringBuffer hexString = new StringBuffer();
+                for (int i = 0; i < shaLength / 2; ++i) {
+	                  hexString.append(Integer.toHexString(0xFF & digest[i]));
+                }
+                return new StringBuilder(propertyPrefix).append(hexString).toString();
+            }
+
+            private void updateProgress() {
+                ProgressBar pb = (ProgressBar) findViewById(R.id.progress_bar);
+                String property_value = new String();
+                try {
+	                property_value = SystemProperties.get(getPropertyName());
+                } catch (Exception e) {
+	                return;
+                }
+                int progress = "".equals(property_value) ? 0 : Integer.parseInt(property_value);
+                pb.setProgress(progress);
+
+                mHandler.removeMessages(1);
+                mHandler.sendEmptyMessageDelayed(1,250);
+            }
+
+            @Override
+            public void onCreate(Bundle savedInstanceState) {
+                super.onCreate(savedInstanceState);
+
+                setContentView(R.layout.encrypt_user_progress);
+				((ProgressBar) findViewById(R.id.progress_bar)).setIndeterminate(false);
+				updateProgress();
+
+                if (Utils.isMonkeyRunning()) {
+                    finish();
+                }
+
+                StatusBarManager sbm = (StatusBarManager) getSystemService(Context.STATUS_BAR_SERVICE);
+                sbm.disable(StatusBarManager.DISABLE_EXPAND
+                        | StatusBarManager.DISABLE_NOTIFICATION_ICONS
+                        | StatusBarManager.DISABLE_NOTIFICATION_ALERTS
+                        | StatusBarManager.DISABLE_SYSTEM_INFO
+                        | StatusBarManager.DISABLE_HOME
+                        | StatusBarManager.DISABLE_RECENT
+                        | StatusBarManager.DISABLE_BACK);
+
+                // Post a delayed message in 700 milliseconds to enable encryption.
+                // NOTE: The animation on this activity is set for 500 milliseconds
+                // I am giving it a little extra time to complete.
+               HandlerThread thread = new HandlerThread("Encrypter");
+			   thread.start();
+			   Handler threadHandler = new Handler(thread.getLooper());
+			   threadHandler.postDelayed(new Runnable() {
+                    public void run() {
+                        IBinder service = ServiceManager.getService("mount");
+                        if (service == null) {
+                            Log.e(TAG, "Failed to find the mount service");
+                            finish();
+                            return;
+                        }
+
+                        PackageManager pm = getPackageManager();
+                        ComponentName name = new ComponentName("com.android.settings", "com.android.settings.CryptKeeper");
+                        pm.setComponentEnabledSetting(name, PackageManager.COMPONENT_ENABLED_STATE_ENABLED,
+                                                      PackageManager.DONT_KILL_APP);
+
+                        IMountService mountService = IMountService.Stub.asInterface(service);
+                        try {
+                            Bundle args = getIntent().getExtras();
+                            final int currentUserId = ActivityManager.getCurrentUser();
+                mountService.encryptUserData(currentUserId, args.getString("password"));
+                        } catch (Exception e) {
+                            Log.e(TAG, "Error while encrypting...", e);
+                        }
+                    }
+                }, 500);
+            }
+        }
+
+        private View mContentView;
+        private Button mFinalButton;
+        private Button.OnClickListener mFinalClickListener = new Button.OnClickListener() {
+
+            public void onClick(View v) {
+                if (Utils.isMonkeyRunning()) {
+                    return;
+                }
+
+                Intent intent = new Intent(getActivity(), Blank.class);
+                intent.putExtras(getArguments());
+
+                startActivity(intent);
+            }
+        };
+
+        private void establishFinalConfirmationState() {
+            mFinalButton = (Button) mContentView.findViewById(R.id.execute_encrypt_user);
+            mFinalButton.setOnClickListener(mFinalClickListener);
+        }
+
+        @Override
+        public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                Bundle savedInstanceState) {
+            mContentView = inflater.inflate(R.layout.encrypt_user_confirm, null);
+            establishFinalConfirmationState();
+            return mContentView;
+        }
+}
diff --git a/src/com/android/settings/EncryptUserSettings.java b/src/com/android/settings/EncryptUserSettings.java
new file mode 100644
index 0000000..7a7adf1
--- /dev/null
+++ b/src/com/android/settings/EncryptUserSettings.java
@@ -0,0 +1,223 @@
+package com.android.settings;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Fragment;
+import android.app.admin.DevicePolicyManager;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.Resources;
+import android.os.BatteryManager;
+import android.os.Bundle;
+import android.preference.Preference;
+import android.preference.PreferenceActivity;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;import android.os.ServiceManager;
+import android.os.IBinder;
+import android.os.storage.IMountService;
+import android.app.ActivityManager;
+import android.util.Log;
+
+import com.android.internal.widget.LockPatternUtils;
+
+import android.os.SystemProperties;
+
+public class EncryptUserSettings extends Fragment{
+
+    private static final String TAG = "EncryptUser";
+
+    private static final int KEYGUARD_REQUEST = 55;
+
+    // This is the minimum acceptable password quality.  If the current password quality is
+    // lower than this, encryption should not be activated.
+    static final int MIN_PASSWORD_QUALITY = DevicePolicyManager.PASSWORD_QUALITY_NUMERIC;
+
+    // Minimum battery charge level (in percent) to launch encryption.  If the battery charge is
+    // lower than this, encryption should not be activated.
+    private static final int MIN_BATTERY_LEVEL = 1;
+
+    private View mContentView;
+    private Button mInitiateButton;
+    private View mPowerWarning;
+    private View mBatteryWarning;
+    private IntentFilter mIntentFilter;
+
+    private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+            if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {
+                final int level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, 0);
+                final int plugged = intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, 0);
+                final int invalidCharger = intent.getIntExtra(
+                    BatteryManager.EXTRA_INVALID_CHARGER, 0);
+
+                final boolean levelOk = level >= MIN_BATTERY_LEVEL;
+                final boolean pluggedOk =
+                    ((plugged & BatteryManager.BATTERY_PLUGGED_ANY) != 0) &&
+                     invalidCharger == 0;
+
+                // Update UI elements based on power/battery status
+                mInitiateButton.setEnabled(levelOk && pluggedOk);
+                mPowerWarning.setVisibility(pluggedOk ? View.GONE : View.VISIBLE );
+                mBatteryWarning.setVisibility(levelOk ? View.GONE : View.VISIBLE);
+            }
+        }
+    };
+
+    private boolean isCurrentUserEncrypted() {
+        int ret = 0;
+        IBinder service = ServiceManager.getService("mount");
+        if (service == null) {
+            Log.e(TAG, "Failed to find the mount service");
+            return false;
+        }
+
+        IMountService mountService = IMountService.Stub.asInterface(service);
+        try {
+           final int currentUserId = ActivityManager.getCurrentUser();
+           ret = mountService.getUserEncryptedDataStat(currentUserId);
+        } catch (Exception e) {
+            Log.e(TAG, "Error while encrypting...", e);
+        }
+
+        return ret == 3;
+    }
+    /**
+     * If the user clicks to begin the reset sequence, we next require a
+     * keyguard confirmation if the user has currently enabled one.  If there
+     * is no keyguard available, we prompt the user to set a password.
+     */
+    private Button.OnClickListener mInitiateListener = new Button.OnClickListener() {
+
+        public void onClick(View v) {
+            boolean userEncrypted = isCurrentUserEncrypted();
+
+            if (!runKeyguardConfirmation(KEYGUARD_REQUEST)) {
+                // TODO replace (or follow) this dialog with an explicit launch into password UI
+                if (userEncrypted) {
+                    new AlertDialog.Builder(getActivity())
+                        .setTitle(R.string.encrypt_user_dialog_need_password_title)
+                        .setIconAttribute(android.R.attr.alertDialogIcon)
+                        .setMessage(R.string.encrypt_user_dialog_need_password_message)
+                        .setPositiveButton(android.R.string.ok, null)
+                        .create()
+                        .show();
+                } else {
+                    new AlertDialog.Builder(getActivity())
+                    .setTitle(R.string.decrypt_user_dialog_need_password_title)
+                    .setIconAttribute(android.R.attr.alertDialogIcon)
+                    .setMessage(R.string.decrypt_user_dialog_need_password_message)
+                    .setPositiveButton(android.R.string.ok, null)
+                    .create()
+                    .show();
+                }
+            }
+          }
+    };
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedState) {
+        boolean userEncrypted = isCurrentUserEncrypted();
+
+        if (userEncrypted) {
+            mContentView = inflater.inflate(R.layout.decrypt_user_settings, null);
+            mInitiateButton = (Button) mContentView.findViewById(R.id.initiate_decrypt_user);
+        }
+        else {
+            mContentView = inflater.inflate(R.layout.encrypt_user_settings, null);
+            mInitiateButton = (Button) mContentView.findViewById(R.id.initiate_encrypt_user);
+        }
+
+        mIntentFilter = new IntentFilter();
+        mIntentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);
+
+        mInitiateButton.setOnClickListener(mInitiateListener);
+        mInitiateButton.setEnabled(false);
+
+        mPowerWarning = mContentView.findViewById(R.id.warning_unplugged);
+        mBatteryWarning = mContentView.findViewById(R.id.warning_low_charge);
+
+        return mContentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        getActivity().registerReceiver(mIntentReceiver, mIntentFilter);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        getActivity().unregisterReceiver(mIntentReceiver);
+    }
+
+    /**
+     * Keyguard validation is run using the standard {@link ConfirmLockPattern}
+     * component as a subactivity
+     * @param request the request code to be returned once confirmation finishes
+     * @return true if confirmation launched
+     */
+    private boolean runKeyguardConfirmation(int request) {
+        // 1.  Confirm that we have a sufficient PIN/Password to continue
+        LockPatternUtils lockPatternUtils = new LockPatternUtils(getActivity());
+        int quality = lockPatternUtils.getActivePasswordQuality();
+        if (quality == DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK
+            && lockPatternUtils.isLockPasswordEnabled()) {
+            // Use the alternate as the quality. We expect this to be
+            // PASSWORD_QUALITY_SOMETHING(pattern) or PASSWORD_QUALITY_NUMERIC(PIN).
+            quality = lockPatternUtils.getKeyguardStoredPasswordQuality();
+        }
+        if (quality < MIN_PASSWORD_QUALITY) {
+            return false;
+        }
+        // 2.  Ask the user to confirm the current PIN/Password
+        Resources res = getActivity().getResources();
+        return new ChooseLockSettingsHelper(getActivity(), this)
+                .launchConfirmationActivity(request,
+                        res.getText(R.string.master_clear_gesture_prompt),
+                        res.getText(R.string.master_clear_gesture_explanation));
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        if (requestCode != KEYGUARD_REQUEST) {
+            return;
+        }
+
+        // If the user entered a valid keyguard trace, present the final
+        // confirmation prompt; otherwise, go back to the initial state.
+        if (resultCode == Activity.RESULT_OK && data != null) {
+            String password = data.getStringExtra(ChooseLockSettingsHelper.EXTRA_KEY_PASSWORD);
+            if (!TextUtils.isEmpty(password)) {
+                showFinalConfirmation(password);
+            }
+        }
+    }
+
+    private void showFinalConfirmation(String password) {
+        boolean userEncrypted = isCurrentUserEncrypted();
+        if (userEncrypted) {
+            Preference preference = new Preference(getActivity());
+            preference.setFragment(DecryptUserConfirm.class.getName());
+            preference.setTitle(R.string.decrypt_user_confirm_title);
+            preference.getExtras().putString("password", password);
+            ((PreferenceActivity) getActivity()).onPreferenceStartFragment(null, preference);
+        } else {
+            Preference preference = new Preference(getActivity());
+            preference.setFragment(EncryptUserConfirm.class.getName());
+            preference.setTitle(R.string.encrypt_user_confirm_title);
+            preference.getExtras().putString("password", password);
+            ((PreferenceActivity) getActivity()).onPreferenceStartFragment(null, preference);
+        }
+    }
+
+}
diff --git a/src/com/android/settings/SecuritySettings.java b/src/com/android/settings/SecuritySettings.java
index e4dcea1..2861f4e 100644
--- a/src/com/android/settings/SecuritySettings.java
+++ b/src/com/android/settings/SecuritySettings.java
@@ -48,6 +48,12 @@ import com.android.internal.widget.LockPatternUtils;
 import java.util.ArrayList;
 import java.util.List;
 
+import android.os.ServiceManager;
+import android.os.IBinder;
+import android.os.storage.IMountService;
+import android.app.ActivityManager;
+import android.os.SystemProperties;
+
 /**
  * Gesture lock pattern settings.
  */
@@ -110,6 +116,25 @@ public class SecuritySettings extends RestrictedSettingsFragment
 
     private boolean mIsPrimary;
 
+    private boolean isCurrentUserEncrypted() {
+        int ret = 0;
+        IBinder service = ServiceManager.getService("mount");
+        if (service == null) {
+            Log.e(TAG, "Failed to find the mount service");
+            finish();
+            return false;
+        }
+
+        IMountService mountService = IMountService.Stub.asInterface(service);
+        try {
+            final int currentUserId = ActivityManager.getCurrentUser();
+            ret = mountService.getUserEncryptedDataStat(currentUserId);
+        } catch (Exception e) {
+            Log.e(TAG, "Error while encrypting...", e);
+        }
+
+        return ret == 3;
+    }
     public SecuritySettings() {
         super(null /* Don't ask for restrictions pin on creation. */);
     }
@@ -183,17 +208,21 @@ public class SecuritySettings extends RestrictedSettingsFragment
             }
         }
 
-        if (mIsPrimary) {
-            switch (mDPM.getStorageEncryptionStatus()) {
+        switch (mDPM.getStorageEncryptionStatus()) {
             case DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE:
                 // The device is currently encrypted.
                 addPreferencesFromResource(R.xml.security_settings_encrypted);
                 break;
             case DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE:
                 // This device supports encryption but isn't encrypted.
-                addPreferencesFromResource(R.xml.security_settings_unencrypted);
+                // Check the primary user data is encrypted
+                boolean userEncrypted = isCurrentUserEncrypted();
+                if (userEncrypted) {
+                    addPreferencesFromResource(R.xml.security_settings_unecrypted_device_encrypted_primary_user);
+                } else {
+                    addPreferencesFromResource(R.xml.security_settings_unencrypted);
+                }
                 break;
-            }
         }
 
         // lock after preference
diff --git a/src/com/android/settings/Settings.java b/src/com/android/settings/Settings.java
index f6f49b8..2824a75 100644
--- a/src/com/android/settings/Settings.java
+++ b/src/com/android/settings/Settings.java
@@ -341,6 +341,7 @@ public class Settings extends PreferenceActivity
         PowerUsageSummary.class.getName(),
         AccountSyncSettings.class.getName(),
         CryptKeeperSettings.class.getName(),
+        EncryptUserSettings.class.getName(),
         DataUsageSummary.class.getName(),
         DreamSettings.class.getName(),
         UserSettings.class.getName(),
@@ -1102,6 +1103,7 @@ public class Settings extends PreferenceActivity
     public static class AccountSyncSettingsActivity extends Settings { /* empty */ }
     public static class AccountSyncSettingsInAddAccountActivity extends Settings { /* empty */ }
     public static class CryptKeeperSettingsActivity extends Settings { /* empty */ }
+    public static class EncryptUserSettingsActivity extends Settings { /* empty */ }
     public static class DeviceAdminSettingsActivity extends Settings { /* empty */ }
     public static class DataUsageSummaryActivity extends Settings { /* empty */ }
     public static class AdvancedWifiSettingsActivity extends Settings { /* empty */ }
-- 
1.9.1

